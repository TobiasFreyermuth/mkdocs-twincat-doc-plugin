# Generated from C:/Users/freyermu/Documents/GitHub/IEC61131-3-Parser\StructuredText.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,154,1001,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,1,0,1,
        0,3,0,185,8,0,1,1,1,1,1,1,3,1,190,8,1,1,1,1,1,1,2,1,2,1,3,1,3,1,
        3,1,3,4,3,200,8,3,11,3,12,3,201,1,4,1,4,1,5,1,5,3,5,208,8,5,1,6,
        1,6,1,6,5,6,213,8,6,10,6,12,6,216,9,6,1,6,1,6,1,7,1,7,1,8,3,8,223,
        8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,237,8,8,
        10,8,12,8,240,9,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,5,10,257,8,10,10,10,12,10,260,9,10,1,10,1,
        10,1,10,1,10,1,11,1,11,3,11,268,8,11,1,12,1,12,1,12,5,12,273,8,12,
        10,12,12,12,276,9,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,3,15,285,
        8,15,1,15,1,15,3,15,289,8,15,1,15,1,15,1,15,3,15,294,8,15,1,15,1,
        15,1,15,1,15,5,15,300,8,15,10,15,12,15,303,9,15,3,15,305,8,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,5,15,321,8,15,10,15,12,15,324,9,15,1,15,1,15,1,15,5,15,329,8,
        15,10,15,12,15,332,9,15,1,15,5,15,335,8,15,10,15,12,15,338,9,15,
        1,16,1,16,1,17,1,17,1,18,1,18,1,18,3,18,347,8,18,1,19,1,19,1,20,
        1,20,1,21,1,21,1,21,5,21,356,8,21,10,21,12,21,359,9,21,1,21,1,21,
        5,21,363,8,21,10,21,12,21,366,9,21,1,22,1,22,1,22,1,22,3,22,372,
        8,22,1,22,5,22,375,8,22,10,22,12,22,378,9,22,1,22,1,22,1,23,3,23,
        383,8,23,1,23,1,23,1,23,1,23,3,23,389,8,23,1,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,405,8,23,10,
        23,12,23,408,9,23,1,23,1,23,1,24,3,24,413,8,24,1,24,1,24,1,24,1,
        24,3,24,419,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,5,24,435,8,24,10,24,12,24,438,9,24,1,24,1,
        24,1,24,1,25,3,25,444,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,461,8,25,10,25,12,25,
        464,9,25,1,25,1,25,1,25,1,26,3,26,470,8,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,487,8,
        26,10,26,12,26,490,9,26,1,26,1,26,1,26,1,27,3,27,496,8,27,1,27,1,
        27,1,27,1,27,3,27,502,8,27,1,27,3,27,505,8,27,1,27,3,27,508,8,27,
        1,27,1,27,1,28,1,28,1,28,3,28,515,8,28,1,29,1,29,1,29,5,29,520,8,
        29,10,29,12,29,523,9,29,1,30,1,30,1,31,1,31,1,31,5,31,530,8,31,10,
        31,12,31,533,9,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,5,34,543,
        8,34,10,34,12,34,546,9,34,1,34,1,34,1,35,1,35,1,35,5,35,553,8,35,
        10,35,12,35,556,9,35,1,35,1,35,1,36,1,36,1,36,5,36,563,8,36,10,36,
        12,36,566,9,36,1,36,1,36,1,37,1,37,1,37,5,37,573,8,37,10,37,12,37,
        576,9,37,1,37,1,37,1,38,1,38,5,38,582,8,38,10,38,12,38,585,9,38,
        1,38,1,38,1,39,1,39,1,39,5,39,592,8,39,10,39,12,39,595,9,39,1,39,
        1,39,1,40,1,40,1,40,5,40,602,8,40,10,40,12,40,605,9,40,1,40,1,40,
        1,41,1,41,5,41,611,8,41,10,41,12,41,614,9,41,1,41,1,41,1,42,1,42,
        1,42,5,42,621,8,42,10,42,12,42,624,9,42,1,42,1,42,1,43,1,43,1,43,
        5,43,631,8,43,10,43,12,43,634,9,43,1,43,1,43,1,44,1,44,5,44,640,
        8,44,10,44,12,44,643,9,44,1,44,1,44,1,45,1,45,5,45,649,8,45,10,45,
        12,45,652,9,45,1,45,1,45,1,46,1,46,5,46,658,8,46,10,46,12,46,661,
        9,46,1,46,1,46,1,47,1,47,1,47,5,47,668,8,47,10,47,12,47,671,9,47,
        1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,682,8,48,10,48,
        12,48,685,9,48,1,48,1,48,1,48,3,48,690,8,48,1,48,1,48,1,49,1,49,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,704,8,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,730,8,50,10,50,
        12,50,733,9,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,
        744,8,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,
        3,56,757,8,56,1,57,1,57,3,57,761,8,57,1,58,1,58,1,58,1,58,1,58,4,
        58,768,8,58,11,58,12,58,769,3,58,772,8,58,1,58,1,58,3,58,776,8,58,
        1,59,1,59,1,60,1,60,1,61,1,61,4,61,784,8,61,11,61,12,61,785,1,62,
        1,62,1,62,1,62,5,62,792,8,62,10,62,12,62,795,9,62,1,62,1,62,1,63,
        1,63,1,64,1,64,1,65,1,65,3,65,805,8,65,1,65,1,65,1,65,5,65,810,8,
        65,10,65,12,65,813,9,65,1,65,1,65,1,66,1,66,1,66,1,66,1,67,1,67,
        1,67,5,67,824,8,67,10,67,12,67,827,9,67,1,67,1,67,1,67,3,67,832,
        8,67,1,68,1,68,1,68,1,69,1,69,1,69,3,69,840,8,69,1,69,1,69,1,69,
        5,69,845,8,69,10,69,12,69,848,9,69,1,70,1,70,1,71,1,71,3,71,854,
        8,71,1,72,1,72,1,72,1,72,1,72,5,72,861,8,72,10,72,12,72,864,9,72,
        3,72,866,8,72,1,72,1,72,1,73,3,73,871,8,73,1,73,5,73,874,8,73,10,
        73,12,73,877,9,73,1,74,1,74,1,74,1,74,3,74,883,8,74,1,75,1,75,1,
        75,1,75,1,76,1,76,1,76,1,76,1,76,3,76,894,8,76,1,77,1,77,1,77,3,
        77,899,8,77,1,77,1,77,3,77,903,8,77,1,77,1,77,1,77,1,77,3,77,909,
        8,77,1,78,1,78,3,78,913,8,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,5,79,924,8,79,10,79,12,79,927,9,79,1,79,1,79,3,79,931,
        8,79,1,79,1,79,1,80,1,80,1,80,1,80,4,80,939,8,80,11,80,12,80,940,
        1,80,1,80,3,80,945,8,80,1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,
        1,82,5,82,956,8,82,10,82,12,82,959,9,82,1,83,1,83,1,84,1,84,1,84,
        1,84,1,84,3,84,968,8,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
        1,86,1,86,1,87,1,87,1,87,1,87,1,87,3,87,985,8,87,1,88,1,88,1,88,
        1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,0,1,
        100,91,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,0,11,1,0,
        117,120,2,0,78,106,108,108,2,0,67,67,71,71,1,0,63,66,2,0,110,110,
        142,143,2,0,131,132,134,136,1,0,139,140,2,0,113,113,139,140,1,0,
        147,151,2,0,61,61,68,68,1,0,152,154,1096,0,184,1,0,0,0,2,189,1,0,
        0,0,4,193,1,0,0,0,6,199,1,0,0,0,8,203,1,0,0,0,10,207,1,0,0,0,12,
        214,1,0,0,0,14,219,1,0,0,0,16,222,1,0,0,0,18,244,1,0,0,0,20,246,
        1,0,0,0,22,267,1,0,0,0,24,274,1,0,0,0,26,279,1,0,0,0,28,281,1,0,
        0,0,30,284,1,0,0,0,32,339,1,0,0,0,34,341,1,0,0,0,36,346,1,0,0,0,
        38,348,1,0,0,0,40,350,1,0,0,0,42,357,1,0,0,0,44,367,1,0,0,0,46,382,
        1,0,0,0,48,412,1,0,0,0,50,443,1,0,0,0,52,469,1,0,0,0,54,495,1,0,
        0,0,56,514,1,0,0,0,58,516,1,0,0,0,60,524,1,0,0,0,62,531,1,0,0,0,
        64,536,1,0,0,0,66,538,1,0,0,0,68,540,1,0,0,0,70,549,1,0,0,0,72,559,
        1,0,0,0,74,569,1,0,0,0,76,579,1,0,0,0,78,588,1,0,0,0,80,598,1,0,
        0,0,82,608,1,0,0,0,84,617,1,0,0,0,86,627,1,0,0,0,88,637,1,0,0,0,
        90,646,1,0,0,0,92,655,1,0,0,0,94,664,1,0,0,0,96,674,1,0,0,0,98,693,
        1,0,0,0,100,703,1,0,0,0,102,743,1,0,0,0,104,745,1,0,0,0,106,747,
        1,0,0,0,108,749,1,0,0,0,110,751,1,0,0,0,112,753,1,0,0,0,114,760,
        1,0,0,0,116,771,1,0,0,0,118,777,1,0,0,0,120,779,1,0,0,0,122,781,
        1,0,0,0,124,787,1,0,0,0,126,798,1,0,0,0,128,800,1,0,0,0,130,802,
        1,0,0,0,132,816,1,0,0,0,134,831,1,0,0,0,136,833,1,0,0,0,138,836,
        1,0,0,0,140,849,1,0,0,0,142,851,1,0,0,0,144,855,1,0,0,0,146,875,
        1,0,0,0,148,882,1,0,0,0,150,884,1,0,0,0,152,893,1,0,0,0,154,908,
        1,0,0,0,156,912,1,0,0,0,158,914,1,0,0,0,160,934,1,0,0,0,162,948,
        1,0,0,0,164,952,1,0,0,0,166,960,1,0,0,0,168,967,1,0,0,0,170,969,
        1,0,0,0,172,977,1,0,0,0,174,979,1,0,0,0,176,986,1,0,0,0,178,992,
        1,0,0,0,180,998,1,0,0,0,182,185,3,4,2,0,183,185,3,2,1,0,184,182,
        1,0,0,0,184,183,1,0,0,0,185,1,1,0,0,0,186,187,3,18,9,0,187,188,5,
        128,0,0,188,190,1,0,0,0,189,186,1,0,0,0,189,190,1,0,0,0,190,191,
        1,0,0,0,191,192,3,4,2,0,192,3,1,0,0,0,193,194,7,0,0,0,194,5,1,0,
        0,0,195,200,3,130,65,0,196,200,3,16,8,0,197,200,3,30,15,0,198,200,
        3,44,22,0,199,195,1,0,0,0,199,196,1,0,0,0,199,197,1,0,0,0,199,198,
        1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,7,1,
        0,0,0,203,204,5,125,0,0,204,9,1,0,0,0,205,208,5,27,0,0,206,208,3,
        14,7,0,207,205,1,0,0,0,207,206,1,0,0,0,208,11,1,0,0,0,209,210,3,
        8,4,0,210,211,5,126,0,0,211,213,1,0,0,0,212,209,1,0,0,0,213,216,
        1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,217,1,0,0,0,216,214,
        1,0,0,0,217,218,3,10,5,0,218,13,1,0,0,0,219,220,5,125,0,0,220,15,
        1,0,0,0,221,223,5,29,0,0,222,221,1,0,0,0,222,223,1,0,0,0,223,224,
        1,0,0,0,224,225,5,36,0,0,225,226,3,14,7,0,226,227,5,129,0,0,227,
        238,3,32,16,0,228,237,3,68,34,0,229,237,3,70,35,0,230,237,3,76,38,
        0,231,237,3,82,41,0,232,237,3,88,44,0,233,237,3,90,45,0,234,237,
        3,92,46,0,235,237,3,94,47,0,236,228,1,0,0,0,236,229,1,0,0,0,236,
        230,1,0,0,0,236,231,1,0,0,0,236,232,1,0,0,0,236,233,1,0,0,0,236,
        234,1,0,0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,
        239,1,0,0,0,239,241,1,0,0,0,240,238,1,0,0,0,241,242,3,180,90,0,242,
        243,5,37,0,0,243,17,1,0,0,0,244,245,7,1,0,0,245,19,1,0,0,0,246,247,
        5,107,0,0,247,248,5,1,0,0,248,249,3,0,0,0,249,250,5,2,0,0,250,258,
        3,0,0,0,251,252,5,127,0,0,252,253,3,0,0,0,253,254,5,2,0,0,254,255,
        3,0,0,0,255,257,1,0,0,0,256,251,1,0,0,0,257,260,1,0,0,0,258,256,
        1,0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,258,1,0,0,0,261,262,
        5,3,0,0,262,263,5,12,0,0,263,264,3,18,9,0,264,21,1,0,0,0,265,268,
        5,28,0,0,266,268,3,26,13,0,267,265,1,0,0,0,267,266,1,0,0,0,268,23,
        1,0,0,0,269,270,3,8,4,0,270,271,5,126,0,0,271,273,1,0,0,0,272,269,
        1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,277,
        1,0,0,0,276,274,1,0,0,0,277,278,3,22,11,0,278,25,1,0,0,0,279,280,
        5,125,0,0,280,27,1,0,0,0,281,282,5,125,0,0,282,29,1,0,0,0,283,285,
        5,29,0,0,284,283,1,0,0,0,284,285,1,0,0,0,285,286,1,0,0,0,286,288,
        5,38,0,0,287,289,7,2,0,0,288,287,1,0,0,0,288,289,1,0,0,0,289,290,
        1,0,0,0,290,293,3,26,13,0,291,292,5,69,0,0,292,294,3,28,14,0,293,
        291,1,0,0,0,293,294,1,0,0,0,294,304,1,0,0,0,295,296,5,74,0,0,296,
        301,3,62,31,0,297,298,5,127,0,0,298,300,3,62,31,0,299,297,1,0,0,
        0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,305,1,0,0,
        0,303,301,1,0,0,0,304,295,1,0,0,0,304,305,1,0,0,0,305,322,1,0,0,
        0,306,321,3,68,34,0,307,321,3,70,35,0,308,321,3,72,36,0,309,321,
        3,74,37,0,310,321,3,76,38,0,311,321,3,78,39,0,312,321,3,80,40,0,
        313,321,3,82,41,0,314,321,3,84,42,0,315,321,3,86,43,0,316,321,3,
        88,44,0,317,321,3,90,45,0,318,321,3,92,46,0,319,321,3,94,47,0,320,
        306,1,0,0,0,320,307,1,0,0,0,320,308,1,0,0,0,320,309,1,0,0,0,320,
        310,1,0,0,0,320,311,1,0,0,0,320,312,1,0,0,0,320,313,1,0,0,0,320,
        314,1,0,0,0,320,315,1,0,0,0,320,316,1,0,0,0,320,317,1,0,0,0,320,
        318,1,0,0,0,320,319,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,
        323,1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,326,3,180,90,0,326,
        330,6,15,-1,0,327,329,3,48,24,0,328,327,1,0,0,0,329,332,1,0,0,0,
        330,328,1,0,0,0,330,331,1,0,0,0,331,336,1,0,0,0,332,330,1,0,0,0,
        333,335,3,54,27,0,334,333,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,
        0,336,337,1,0,0,0,337,31,1,0,0,0,338,336,1,0,0,0,339,340,3,36,18,
        0,340,33,1,0,0,0,341,342,5,125,0,0,342,35,1,0,0,0,343,347,3,18,9,
        0,344,347,3,20,10,0,345,347,3,34,17,0,346,343,1,0,0,0,346,344,1,
        0,0,0,346,345,1,0,0,0,347,37,1,0,0,0,348,349,5,125,0,0,349,39,1,
        0,0,0,350,351,5,125,0,0,351,41,1,0,0,0,352,353,3,8,4,0,353,354,5,
        126,0,0,354,356,1,0,0,0,355,352,1,0,0,0,356,359,1,0,0,0,357,355,
        1,0,0,0,357,358,1,0,0,0,358,360,1,0,0,0,359,357,1,0,0,0,360,364,
        3,26,13,0,361,363,5,144,0,0,362,361,1,0,0,0,363,366,1,0,0,0,364,
        362,1,0,0,0,364,365,1,0,0,0,365,43,1,0,0,0,366,364,1,0,0,0,367,368,
        5,40,0,0,368,371,3,60,30,0,369,370,5,69,0,0,370,372,3,58,29,0,371,
        369,1,0,0,0,371,372,1,0,0,0,372,376,1,0,0,0,373,375,3,46,23,0,374,
        373,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,
        379,1,0,0,0,378,376,1,0,0,0,379,380,5,41,0,0,380,45,1,0,0,0,381,
        383,5,29,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,
        385,5,42,0,0,385,388,3,38,19,0,386,387,5,129,0,0,387,389,3,32,16,
        0,388,386,1,0,0,0,388,389,1,0,0,0,389,406,1,0,0,0,390,405,3,68,34,
        0,391,405,3,70,35,0,392,405,3,72,36,0,393,405,3,74,37,0,394,405,
        3,76,38,0,395,405,3,78,39,0,396,405,3,80,40,0,397,405,3,82,41,0,
        398,405,3,84,42,0,399,405,3,86,43,0,400,405,3,88,44,0,401,405,3,
        90,45,0,402,405,3,92,46,0,403,405,3,94,47,0,404,390,1,0,0,0,404,
        391,1,0,0,0,404,392,1,0,0,0,404,393,1,0,0,0,404,394,1,0,0,0,404,
        395,1,0,0,0,404,396,1,0,0,0,404,397,1,0,0,0,404,398,1,0,0,0,404,
        399,1,0,0,0,404,400,1,0,0,0,404,401,1,0,0,0,404,402,1,0,0,0,404,
        403,1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,
        409,1,0,0,0,408,406,1,0,0,0,409,410,5,43,0,0,410,47,1,0,0,0,411,
        413,5,29,0,0,412,411,1,0,0,0,412,413,1,0,0,0,413,414,1,0,0,0,414,
        415,5,42,0,0,415,418,3,38,19,0,416,417,5,129,0,0,417,419,3,32,16,
        0,418,416,1,0,0,0,418,419,1,0,0,0,419,436,1,0,0,0,420,435,3,68,34,
        0,421,435,3,70,35,0,422,435,3,72,36,0,423,435,3,74,37,0,424,435,
        3,76,38,0,425,435,3,78,39,0,426,435,3,80,40,0,427,435,3,82,41,0,
        428,435,3,84,42,0,429,435,3,86,43,0,430,435,3,88,44,0,431,435,3,
        90,45,0,432,435,3,92,46,0,433,435,3,94,47,0,434,420,1,0,0,0,434,
        421,1,0,0,0,434,422,1,0,0,0,434,423,1,0,0,0,434,424,1,0,0,0,434,
        425,1,0,0,0,434,426,1,0,0,0,434,427,1,0,0,0,434,428,1,0,0,0,434,
        429,1,0,0,0,434,430,1,0,0,0,434,431,1,0,0,0,434,432,1,0,0,0,434,
        433,1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,
        439,1,0,0,0,438,436,1,0,0,0,439,440,3,180,90,0,440,441,5,43,0,0,
        441,49,1,0,0,0,442,444,5,29,0,0,443,442,1,0,0,0,443,444,1,0,0,0,
        444,445,1,0,0,0,445,462,5,46,0,0,446,461,3,68,34,0,447,461,3,70,
        35,0,448,461,3,72,36,0,449,461,3,74,37,0,450,461,3,76,38,0,451,461,
        3,78,39,0,452,461,3,80,40,0,453,461,3,82,41,0,454,461,3,84,42,0,
        455,461,3,86,43,0,456,461,3,88,44,0,457,461,3,90,45,0,458,461,3,
        92,46,0,459,461,3,94,47,0,460,446,1,0,0,0,460,447,1,0,0,0,460,448,
        1,0,0,0,460,449,1,0,0,0,460,450,1,0,0,0,460,451,1,0,0,0,460,452,
        1,0,0,0,460,453,1,0,0,0,460,454,1,0,0,0,460,455,1,0,0,0,460,456,
        1,0,0,0,460,457,1,0,0,0,460,458,1,0,0,0,460,459,1,0,0,0,461,464,
        1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,465,1,0,0,0,464,462,
        1,0,0,0,465,466,3,180,90,0,466,467,5,47,0,0,467,51,1,0,0,0,468,470,
        5,29,0,0,469,468,1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,488,
        5,48,0,0,472,487,3,68,34,0,473,487,3,70,35,0,474,487,3,72,36,0,475,
        487,3,74,37,0,476,487,3,76,38,0,477,487,3,78,39,0,478,487,3,80,40,
        0,479,487,3,82,41,0,480,487,3,84,42,0,481,487,3,86,43,0,482,487,
        3,88,44,0,483,487,3,90,45,0,484,487,3,92,46,0,485,487,3,94,47,0,
        486,472,1,0,0,0,486,473,1,0,0,0,486,474,1,0,0,0,486,475,1,0,0,0,
        486,476,1,0,0,0,486,477,1,0,0,0,486,478,1,0,0,0,486,479,1,0,0,0,
        486,480,1,0,0,0,486,481,1,0,0,0,486,482,1,0,0,0,486,483,1,0,0,0,
        486,484,1,0,0,0,486,485,1,0,0,0,487,490,1,0,0,0,488,486,1,0,0,0,
        488,489,1,0,0,0,489,491,1,0,0,0,490,488,1,0,0,0,491,492,3,180,90,
        0,492,493,5,49,0,0,493,53,1,0,0,0,494,496,5,29,0,0,495,494,1,0,0,
        0,495,496,1,0,0,0,496,497,1,0,0,0,497,498,5,44,0,0,498,501,3,40,
        20,0,499,500,5,129,0,0,500,502,3,32,16,0,501,499,1,0,0,0,501,502,
        1,0,0,0,502,504,1,0,0,0,503,505,3,50,25,0,504,503,1,0,0,0,504,505,
        1,0,0,0,505,507,1,0,0,0,506,508,3,52,26,0,507,506,1,0,0,0,507,508,
        1,0,0,0,508,509,1,0,0,0,509,510,5,45,0,0,510,55,1,0,0,0,511,515,
        3,116,58,0,512,515,3,42,21,0,513,515,5,50,0,0,514,511,1,0,0,0,514,
        512,1,0,0,0,514,513,1,0,0,0,515,57,1,0,0,0,516,521,3,62,31,0,517,
        518,5,127,0,0,518,520,3,62,31,0,519,517,1,0,0,0,520,523,1,0,0,0,
        521,519,1,0,0,0,521,522,1,0,0,0,522,59,1,0,0,0,523,521,1,0,0,0,524,
        525,5,125,0,0,525,61,1,0,0,0,526,527,3,8,4,0,527,528,5,126,0,0,528,
        530,1,0,0,0,529,526,1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,531,
        532,1,0,0,0,532,534,1,0,0,0,533,531,1,0,0,0,534,535,3,60,30,0,535,
        63,1,0,0,0,536,537,5,125,0,0,537,65,1,0,0,0,538,539,7,3,0,0,539,
        67,1,0,0,0,540,544,5,51,0,0,541,543,3,96,48,0,542,541,1,0,0,0,543,
        546,1,0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,
        544,1,0,0,0,547,548,5,60,0,0,548,69,1,0,0,0,549,550,5,51,0,0,550,
        554,5,68,0,0,551,553,3,96,48,0,552,551,1,0,0,0,553,556,1,0,0,0,554,
        552,1,0,0,0,554,555,1,0,0,0,555,557,1,0,0,0,556,554,1,0,0,0,557,
        558,5,60,0,0,558,71,1,0,0,0,559,560,5,51,0,0,560,564,5,61,0,0,561,
        563,3,96,48,0,562,561,1,0,0,0,563,566,1,0,0,0,564,562,1,0,0,0,564,
        565,1,0,0,0,565,567,1,0,0,0,566,564,1,0,0,0,567,568,5,60,0,0,568,
        73,1,0,0,0,569,570,5,51,0,0,570,574,5,62,0,0,571,573,3,96,48,0,572,
        571,1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,
        577,1,0,0,0,576,574,1,0,0,0,577,578,5,60,0,0,578,75,1,0,0,0,579,
        583,5,52,0,0,580,582,3,96,48,0,581,580,1,0,0,0,582,585,1,0,0,0,583,
        581,1,0,0,0,583,584,1,0,0,0,584,586,1,0,0,0,585,583,1,0,0,0,586,
        587,5,60,0,0,587,77,1,0,0,0,588,589,5,52,0,0,589,593,5,61,0,0,590,
        592,3,96,48,0,591,590,1,0,0,0,592,595,1,0,0,0,593,591,1,0,0,0,593,
        594,1,0,0,0,594,596,1,0,0,0,595,593,1,0,0,0,596,597,5,60,0,0,597,
        79,1,0,0,0,598,599,5,52,0,0,599,603,5,62,0,0,600,602,3,96,48,0,601,
        600,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,
        606,1,0,0,0,605,603,1,0,0,0,606,607,5,60,0,0,607,81,1,0,0,0,608,
        612,5,53,0,0,609,611,3,96,48,0,610,609,1,0,0,0,611,614,1,0,0,0,612,
        610,1,0,0,0,612,613,1,0,0,0,613,615,1,0,0,0,614,612,1,0,0,0,615,
        616,5,60,0,0,616,83,1,0,0,0,617,618,5,53,0,0,618,622,5,61,0,0,619,
        621,3,96,48,0,620,619,1,0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,622,
        623,1,0,0,0,623,625,1,0,0,0,624,622,1,0,0,0,625,626,5,60,0,0,626,
        85,1,0,0,0,627,628,5,53,0,0,628,632,5,62,0,0,629,631,3,96,48,0,630,
        629,1,0,0,0,631,634,1,0,0,0,632,630,1,0,0,0,632,633,1,0,0,0,633,
        635,1,0,0,0,634,632,1,0,0,0,635,636,5,60,0,0,636,87,1,0,0,0,637,
        641,5,54,0,0,638,640,3,96,48,0,639,638,1,0,0,0,640,643,1,0,0,0,641,
        639,1,0,0,0,641,642,1,0,0,0,642,644,1,0,0,0,643,641,1,0,0,0,644,
        645,5,60,0,0,645,89,1,0,0,0,646,650,5,58,0,0,647,649,3,96,48,0,648,
        647,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,
        653,1,0,0,0,652,650,1,0,0,0,653,654,5,60,0,0,654,91,1,0,0,0,655,
        659,5,55,0,0,656,658,3,96,48,0,657,656,1,0,0,0,658,661,1,0,0,0,659,
        657,1,0,0,0,659,660,1,0,0,0,660,662,1,0,0,0,661,659,1,0,0,0,662,
        663,5,60,0,0,663,93,1,0,0,0,664,665,5,55,0,0,665,669,5,68,0,0,666,
        668,3,96,48,0,667,666,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,669,
        670,1,0,0,0,670,672,1,0,0,0,671,669,1,0,0,0,672,673,5,60,0,0,673,
        95,1,0,0,0,674,675,5,125,0,0,675,683,5,129,0,0,676,677,3,8,4,0,677,
        678,5,126,0,0,678,682,1,0,0,0,679,680,5,116,0,0,680,682,5,126,0,
        0,681,676,1,0,0,0,681,679,1,0,0,0,682,685,1,0,0,0,683,681,1,0,0,
        0,683,684,1,0,0,0,684,686,1,0,0,0,685,683,1,0,0,0,686,689,3,36,18,
        0,687,688,5,9,0,0,688,690,3,98,49,0,689,687,1,0,0,0,689,690,1,0,
        0,0,690,691,1,0,0,0,691,692,5,130,0,0,692,97,1,0,0,0,693,694,3,100,
        50,0,694,99,1,0,0,0,695,696,6,50,-1,0,696,704,3,102,51,0,697,704,
        5,125,0,0,698,699,5,125,0,0,699,704,5,144,0,0,700,701,3,110,55,0,
        701,702,3,100,50,8,702,704,1,0,0,0,703,695,1,0,0,0,703,697,1,0,0,
        0,703,698,1,0,0,0,703,700,1,0,0,0,704,731,1,0,0,0,705,706,10,7,0,
        0,706,707,5,141,0,0,707,730,3,100,50,7,708,709,10,6,0,0,709,710,
        3,104,52,0,710,711,3,100,50,7,711,730,1,0,0,0,712,713,10,5,0,0,713,
        714,3,108,54,0,714,715,3,100,50,6,715,730,1,0,0,0,716,717,10,4,0,
        0,717,718,3,106,53,0,718,719,3,100,50,5,719,730,1,0,0,0,720,721,
        10,3,0,0,721,722,5,111,0,0,722,730,3,100,50,4,723,724,10,2,0,0,724,
        725,5,109,0,0,725,730,3,100,50,3,726,727,10,1,0,0,727,728,5,112,
        0,0,728,730,3,100,50,2,729,705,1,0,0,0,729,708,1,0,0,0,729,712,1,
        0,0,0,729,716,1,0,0,0,729,720,1,0,0,0,729,723,1,0,0,0,729,726,1,
        0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,101,1,
        0,0,0,733,731,1,0,0,0,734,744,3,0,0,0,735,744,5,114,0,0,736,744,
        5,115,0,0,737,744,3,142,71,0,738,744,3,144,72,0,739,740,5,137,0,
        0,740,741,3,100,50,0,741,742,5,138,0,0,742,744,1,0,0,0,743,734,1,
        0,0,0,743,735,1,0,0,0,743,736,1,0,0,0,743,737,1,0,0,0,743,738,1,
        0,0,0,743,739,1,0,0,0,744,103,1,0,0,0,745,746,7,4,0,0,746,105,1,
        0,0,0,747,748,7,5,0,0,748,107,1,0,0,0,749,750,7,6,0,0,750,109,1,
        0,0,0,751,752,7,7,0,0,752,111,1,0,0,0,753,754,5,126,0,0,754,756,
        5,145,0,0,755,757,7,8,0,0,756,755,1,0,0,0,756,757,1,0,0,0,757,113,
        1,0,0,0,758,761,3,138,69,0,759,761,3,116,58,0,760,758,1,0,0,0,760,
        759,1,0,0,0,761,115,1,0,0,0,762,763,5,72,0,0,763,772,5,126,0,0,764,
        765,3,8,4,0,765,766,5,126,0,0,766,768,1,0,0,0,767,764,1,0,0,0,768,
        769,1,0,0,0,769,767,1,0,0,0,769,770,1,0,0,0,770,772,1,0,0,0,771,
        762,1,0,0,0,771,767,1,0,0,0,771,772,1,0,0,0,772,775,1,0,0,0,773,
        776,3,118,59,0,774,776,3,122,61,0,775,773,1,0,0,0,775,774,1,0,0,
        0,776,117,1,0,0,0,777,778,3,120,60,0,778,119,1,0,0,0,779,780,5,125,
        0,0,780,121,1,0,0,0,781,783,3,118,59,0,782,784,3,124,62,0,783,782,
        1,0,0,0,784,785,1,0,0,0,785,783,1,0,0,0,785,786,1,0,0,0,786,123,
        1,0,0,0,787,788,5,1,0,0,788,793,3,126,63,0,789,790,5,127,0,0,790,
        792,3,126,63,0,791,789,1,0,0,0,792,795,1,0,0,0,793,791,1,0,0,0,793,
        794,1,0,0,0,794,796,1,0,0,0,795,793,1,0,0,0,796,797,5,3,0,0,797,
        125,1,0,0,0,798,799,3,100,50,0,799,127,1,0,0,0,800,801,5,125,0,0,
        801,129,1,0,0,0,802,804,5,56,0,0,803,805,7,9,0,0,804,803,1,0,0,0,
        804,805,1,0,0,0,805,811,1,0,0,0,806,807,3,132,66,0,807,808,5,130,
        0,0,808,810,1,0,0,0,809,806,1,0,0,0,810,813,1,0,0,0,811,809,1,0,
        0,0,811,812,1,0,0,0,812,814,1,0,0,0,813,811,1,0,0,0,814,815,5,60,
        0,0,815,131,1,0,0,0,816,817,3,134,67,0,817,818,5,129,0,0,818,819,
        3,24,12,0,819,133,1,0,0,0,820,825,3,128,64,0,821,822,5,127,0,0,822,
        824,3,128,64,0,823,821,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,0,825,
        826,1,0,0,0,826,832,1,0,0,0,827,825,1,0,0,0,828,829,3,128,64,0,829,
        830,3,136,68,0,830,832,1,0,0,0,831,820,1,0,0,0,831,828,1,0,0,0,832,
        135,1,0,0,0,833,834,5,75,0,0,834,835,3,138,69,0,835,137,1,0,0,0,
        836,837,5,145,0,0,837,839,7,10,0,0,838,840,7,8,0,0,839,838,1,0,0,
        0,839,840,1,0,0,0,840,841,1,0,0,0,841,846,3,4,2,0,842,843,5,126,
        0,0,843,845,3,4,2,0,844,842,1,0,0,0,845,848,1,0,0,0,846,844,1,0,
        0,0,846,847,1,0,0,0,847,139,1,0,0,0,848,846,1,0,0,0,849,850,3,100,
        50,0,850,141,1,0,0,0,851,853,3,114,57,0,852,854,3,112,56,0,853,852,
        1,0,0,0,853,854,1,0,0,0,854,143,1,0,0,0,855,856,3,12,6,0,856,865,
        5,137,0,0,857,862,3,154,77,0,858,859,5,127,0,0,859,861,3,154,77,
        0,860,858,1,0,0,0,861,864,1,0,0,0,862,860,1,0,0,0,862,863,1,0,0,
        0,863,866,1,0,0,0,864,862,1,0,0,0,865,857,1,0,0,0,865,866,1,0,0,
        0,866,867,1,0,0,0,867,868,5,138,0,0,868,145,1,0,0,0,869,871,3,148,
        74,0,870,869,1,0,0,0,870,871,1,0,0,0,871,872,1,0,0,0,872,874,5,130,
        0,0,873,870,1,0,0,0,874,877,1,0,0,0,875,873,1,0,0,0,875,876,1,0,
        0,0,876,147,1,0,0,0,877,875,1,0,0,0,878,883,3,150,75,0,879,883,3,
        152,76,0,880,883,3,156,78,0,881,883,3,168,84,0,882,878,1,0,0,0,882,
        879,1,0,0,0,882,880,1,0,0,0,882,881,1,0,0,0,883,149,1,0,0,0,884,
        885,3,114,57,0,885,886,5,9,0,0,886,887,3,100,50,0,887,151,1,0,0,
        0,888,894,3,144,72,0,889,890,5,73,0,0,890,891,5,137,0,0,891,894,
        5,138,0,0,892,894,5,14,0,0,893,888,1,0,0,0,893,889,1,0,0,0,893,892,
        1,0,0,0,894,153,1,0,0,0,895,896,3,120,60,0,896,897,5,9,0,0,897,899,
        1,0,0,0,898,895,1,0,0,0,898,899,1,0,0,0,899,900,1,0,0,0,900,909,
        3,100,50,0,901,903,5,113,0,0,902,901,1,0,0,0,902,903,1,0,0,0,903,
        904,1,0,0,0,904,905,3,120,60,0,905,906,5,10,0,0,906,907,3,114,57,
        0,907,909,1,0,0,0,908,898,1,0,0,0,908,902,1,0,0,0,909,155,1,0,0,
        0,910,913,3,158,79,0,911,913,3,160,80,0,912,910,1,0,0,0,912,911,
        1,0,0,0,913,157,1,0,0,0,914,915,5,4,0,0,915,916,3,100,50,0,916,917,
        5,5,0,0,917,925,3,146,73,0,918,919,5,6,0,0,919,920,3,100,50,0,920,
        921,5,5,0,0,921,922,3,146,73,0,922,924,1,0,0,0,923,918,1,0,0,0,924,
        927,1,0,0,0,925,923,1,0,0,0,925,926,1,0,0,0,926,930,1,0,0,0,927,
        925,1,0,0,0,928,929,5,7,0,0,929,931,3,146,73,0,930,928,1,0,0,0,930,
        931,1,0,0,0,931,932,1,0,0,0,932,933,5,8,0,0,933,159,1,0,0,0,934,
        935,5,11,0,0,935,936,3,100,50,0,936,938,5,12,0,0,937,939,3,162,81,
        0,938,937,1,0,0,0,939,940,1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,
        0,941,944,1,0,0,0,942,943,5,7,0,0,943,945,3,146,73,0,944,942,1,0,
        0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,947,5,13,0,0,947,161,1,0,
        0,0,948,949,3,164,82,0,949,950,5,129,0,0,950,951,3,146,73,0,951,
        163,1,0,0,0,952,957,3,166,83,0,953,954,5,127,0,0,954,956,3,166,83,
        0,955,953,1,0,0,0,956,959,1,0,0,0,957,955,1,0,0,0,957,958,1,0,0,
        0,958,165,1,0,0,0,959,957,1,0,0,0,960,961,3,140,70,0,961,167,1,0,
        0,0,962,968,3,170,85,0,963,968,3,176,88,0,964,968,3,178,89,0,965,
        968,5,20,0,0,966,968,5,19,0,0,967,962,1,0,0,0,967,963,1,0,0,0,967,
        964,1,0,0,0,967,965,1,0,0,0,967,966,1,0,0,0,968,169,1,0,0,0,969,
        970,5,15,0,0,970,971,3,172,86,0,971,972,5,9,0,0,972,973,3,174,87,
        0,973,974,5,16,0,0,974,975,3,146,73,0,975,976,5,21,0,0,976,171,1,
        0,0,0,977,978,5,125,0,0,978,173,1,0,0,0,979,980,3,100,50,0,980,981,
        5,17,0,0,981,984,3,100,50,0,982,983,5,18,0,0,983,985,3,100,50,0,
        984,982,1,0,0,0,984,985,1,0,0,0,985,175,1,0,0,0,986,987,5,22,0,0,
        987,988,3,100,50,0,988,989,5,16,0,0,989,990,3,146,73,0,990,991,5,
        23,0,0,991,177,1,0,0,0,992,993,5,24,0,0,993,994,3,146,73,0,994,995,
        5,25,0,0,995,996,3,100,50,0,996,997,5,26,0,0,997,179,1,0,0,0,998,
        999,3,146,73,0,999,181,1,0,0,0,99,184,189,199,201,207,214,222,236,
        238,258,267,274,284,288,293,301,304,320,322,330,336,346,357,364,
        371,376,382,388,404,406,412,418,434,436,443,460,462,469,486,488,
        495,501,504,507,514,521,531,544,554,564,574,583,593,603,612,622,
        632,641,650,659,669,681,683,689,703,729,731,743,756,760,769,771,
        775,785,793,804,811,825,831,839,846,853,862,865,870,875,882,893,
        898,902,908,912,925,930,940,944,957,967,984
    ]

class StructuredTextParser ( Parser ):

    grammarFileName = "StructuredText.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'['", "'..'", "']'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "':='", "'=>'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'\\n'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'.'", "','", "'#'", "':'", 
                     "';'", "'>'", "'>='", "'<>'", "'<'", "'<='", "'='", 
                     "'('", "')'", "'+'", "'-'", "'**'", "'*'", "'/'", "'^'", 
                     "'%'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "IF", "THEN", "ELSIF", "ELSE", "END_IF", "ASSIGNE", 
                      "OUTPUT_ARROW", "CASE", "OF", "END_CASE", "RETURN", 
                      "FOR", "DO", "TO", "BY", "CONTINUE", "EXIT", "END_FOR", 
                      "WHILE", "END_WHILE", "REPEAT", "UNTIL", "END_REPEAT", 
                      "STD_FUNC_NAME", "STD_FB_NAME", "DOC_STRING", "PRAGMA", 
                      "Comment", "WS", "EOL", "PROGRAM", "END_PROGRAM", 
                      "FUNCTION", "END_FUNCTION", "FUNCTION_BLOCK", "END_FUNCTION_BLOCK", 
                      "INTERFACE", "END_INTERFACE", "METHOD", "END_METHOD", 
                      "PROPERTY", "END_PROPERTY", "PROPERTY_GETTER", "END_PROPERTY_GETTER", 
                      "PROPERTY_SETTER", "END_PROPERTY_SETTER", "NULL", 
                      "VAR", "VAR_INPUT", "VAR_OUTPUT", "VAR_IN_OUT", "VAR_EXTERNAL", 
                      "VAR_GLOBAL", "VAR_ACCESS", "VAR_TEMP", "VAR_CONFIG", 
                      "END_VAR", "RETAIN", "NON_RETAIN", "PROTECTED", "PUBLIC", 
                      "PRIVATE", "INTERNAL", "FINAL", "CONSTANT", "EXTENDS", 
                      "OVERRIDE", "ABSTRACT", "THIS", "SUPER", "IMPLEMENTS", 
                      "AT", "REF", "REF_TO", "BOOL", "SINT", "INT", "DINT", 
                      "LINT", "USINT", "UINT", "UDINT", "ULINT", "REAL", 
                      "LREAL", "TIME", "LTIME", "DATE", "LDATE", "TIME_OF_DAY", 
                      "TOD", "LTIME_OF_DAY", "LTOD", "DATE_AND_TIME", "DT", 
                      "LDATE_AND_TIME", "LDT", "STRING", "WSTRING", "BYTE", 
                      "WORD", "DWORD", "LWORD", "ARRAY", "ANY", "XOR", "MOD", 
                      "AND", "OR", "NOT", "TRUE", "FALSE", "TWINCAT_SYSTEM", 
                      "HEX_NUMBER", "DEZ_NUMBER", "OCT_NUMBER", "BIN_NUMBER", 
                      "HEX_CHAR", "DIGIT_CHAR", "OCTAL_CHAR", "BIT", "IDENTIFIER", 
                      "DOT", "COMMA", "HASH", "COLON", "SEMICOLON", "GT", 
                      "GE", "UE", "LT", "LE", "EQ", "L_PAREN", "R_PAREN", 
                      "PLUS", "MINUS", "POWER", "MULTIPLY", "DIVIDE", "DEREFERENCE", 
                      "PERCENT", "COMMON_CHAR_VALUE", "X", "B", "W", "D", 
                      "L", "I", "Q", "M" ]

    RULE_number = 0
    RULE_typed_number = 1
    RULE_row_number = 2
    RULE_pou_declaration = 3
    RULE_namespace_Name = 4
    RULE_function_name = 5
    RULE_func_Access = 6
    RULE_derived_Func_Name = 7
    RULE_function_declaration = 8
    RULE_elementary_data_types = 9
    RULE_array_data_type = 10
    RULE_fb_Type_Name = 11
    RULE_fb_Type_Access = 12
    RULE_function_block_name = 13
    RULE_parent_function_block_name = 14
    RULE_function_block_declaration = 15
    RULE_return_data_type = 16
    RULE_user_defined_data_type = 17
    RULE_data_type = 18
    RULE_method_Name = 19
    RULE_property_Name = 20
    RULE_fb_Instance_Name = 21
    RULE_interface_Decl = 22
    RULE_method_Prototype = 23
    RULE_method_declaration = 24
    RULE_property_getter_declaration = 25
    RULE_property_setter_declaration = 26
    RULE_property_declaration = 27
    RULE_interface_Value = 28
    RULE_interface_Name_List = 29
    RULE_interface_Type_Name = 30
    RULE_interface_Type_Access = 31
    RULE_interface_Name = 32
    RULE_access_Spec = 33
    RULE_var_block = 34
    RULE_var_const_block = 35
    RULE_var_retain_block = 36
    RULE_var_non_retain_block = 37
    RULE_var_in_block = 38
    RULE_var_in_retain_block = 39
    RULE_var_in_non_retain_block = 40
    RULE_var_out_block = 41
    RULE_var_out_retain_block = 42
    RULE_var_out_non_retain_block = 43
    RULE_var_inout_block = 44
    RULE_var_temp_block = 45
    RULE_var_external_block = 46
    RULE_var_external_const_block = 47
    RULE_declaration_stmt = 48
    RULE_constant_expression = 49
    RULE_expression = 50
    RULE_primary_Expr = 51
    RULE_term = 52
    RULE_comparator = 53
    RULE_add_sub = 54
    RULE_unary = 55
    RULE_multibit_Part_Access = 56
    RULE_variable = 57
    RULE_symbolic_Variable = 58
    RULE_var_Access = 59
    RULE_variable_Name = 60
    RULE_multi_Elem_Var = 61
    RULE_subscript_List = 62
    RULE_subscript = 63
    RULE_global_Var_Name = 64
    RULE_global_Var_Decls = 65
    RULE_global_Var_Decl = 66
    RULE_global_Var_Spec = 67
    RULE_located_At = 68
    RULE_direct_Variable = 69
    RULE_constant_Expr = 70
    RULE_variable_Access = 71
    RULE_func_Call = 72
    RULE_stmt_List = 73
    RULE_stmt = 74
    RULE_assign_Stmt = 75
    RULE_subprog_Ctrl_Stmt = 76
    RULE_param_Assign = 77
    RULE_selection_Stmt = 78
    RULE_if_Stmt = 79
    RULE_case_Stmt = 80
    RULE_case_Selection = 81
    RULE_case_List = 82
    RULE_case_List_Elem = 83
    RULE_iteration_Stmt = 84
    RULE_for_Stmt = 85
    RULE_control_Variable = 86
    RULE_for_List = 87
    RULE_while_Stmt = 88
    RULE_repeat_Stmt = 89
    RULE_function_body = 90

    ruleNames =  [ "number", "typed_number", "row_number", "pou_declaration", 
                   "namespace_Name", "function_name", "func_Access", "derived_Func_Name", 
                   "function_declaration", "elementary_data_types", "array_data_type", 
                   "fb_Type_Name", "fb_Type_Access", "function_block_name", 
                   "parent_function_block_name", "function_block_declaration", 
                   "return_data_type", "user_defined_data_type", "data_type", 
                   "method_Name", "property_Name", "fb_Instance_Name", "interface_Decl", 
                   "method_Prototype", "method_declaration", "property_getter_declaration", 
                   "property_setter_declaration", "property_declaration", 
                   "interface_Value", "interface_Name_List", "interface_Type_Name", 
                   "interface_Type_Access", "interface_Name", "access_Spec", 
                   "var_block", "var_const_block", "var_retain_block", "var_non_retain_block", 
                   "var_in_block", "var_in_retain_block", "var_in_non_retain_block", 
                   "var_out_block", "var_out_retain_block", "var_out_non_retain_block", 
                   "var_inout_block", "var_temp_block", "var_external_block", 
                   "var_external_const_block", "declaration_stmt", "constant_expression", 
                   "expression", "primary_Expr", "term", "comparator", "add_sub", 
                   "unary", "multibit_Part_Access", "variable", "symbolic_Variable", 
                   "var_Access", "variable_Name", "multi_Elem_Var", "subscript_List", 
                   "subscript", "global_Var_Name", "global_Var_Decls", "global_Var_Decl", 
                   "global_Var_Spec", "located_At", "direct_Variable", "constant_Expr", 
                   "variable_Access", "func_Call", "stmt_List", "stmt", 
                   "assign_Stmt", "subprog_Ctrl_Stmt", "param_Assign", "selection_Stmt", 
                   "if_Stmt", "case_Stmt", "case_Selection", "case_List", 
                   "case_List_Elem", "iteration_Stmt", "for_Stmt", "control_Variable", 
                   "for_List", "while_Stmt", "repeat_Stmt", "function_body" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    IF=4
    THEN=5
    ELSIF=6
    ELSE=7
    END_IF=8
    ASSIGNE=9
    OUTPUT_ARROW=10
    CASE=11
    OF=12
    END_CASE=13
    RETURN=14
    FOR=15
    DO=16
    TO=17
    BY=18
    CONTINUE=19
    EXIT=20
    END_FOR=21
    WHILE=22
    END_WHILE=23
    REPEAT=24
    UNTIL=25
    END_REPEAT=26
    STD_FUNC_NAME=27
    STD_FB_NAME=28
    DOC_STRING=29
    PRAGMA=30
    Comment=31
    WS=32
    EOL=33
    PROGRAM=34
    END_PROGRAM=35
    FUNCTION=36
    END_FUNCTION=37
    FUNCTION_BLOCK=38
    END_FUNCTION_BLOCK=39
    INTERFACE=40
    END_INTERFACE=41
    METHOD=42
    END_METHOD=43
    PROPERTY=44
    END_PROPERTY=45
    PROPERTY_GETTER=46
    END_PROPERTY_GETTER=47
    PROPERTY_SETTER=48
    END_PROPERTY_SETTER=49
    NULL=50
    VAR=51
    VAR_INPUT=52
    VAR_OUTPUT=53
    VAR_IN_OUT=54
    VAR_EXTERNAL=55
    VAR_GLOBAL=56
    VAR_ACCESS=57
    VAR_TEMP=58
    VAR_CONFIG=59
    END_VAR=60
    RETAIN=61
    NON_RETAIN=62
    PROTECTED=63
    PUBLIC=64
    PRIVATE=65
    INTERNAL=66
    FINAL=67
    CONSTANT=68
    EXTENDS=69
    OVERRIDE=70
    ABSTRACT=71
    THIS=72
    SUPER=73
    IMPLEMENTS=74
    AT=75
    REF=76
    REF_TO=77
    BOOL=78
    SINT=79
    INT=80
    DINT=81
    LINT=82
    USINT=83
    UINT=84
    UDINT=85
    ULINT=86
    REAL=87
    LREAL=88
    TIME=89
    LTIME=90
    DATE=91
    LDATE=92
    TIME_OF_DAY=93
    TOD=94
    LTIME_OF_DAY=95
    LTOD=96
    DATE_AND_TIME=97
    DT=98
    LDATE_AND_TIME=99
    LDT=100
    STRING=101
    WSTRING=102
    BYTE=103
    WORD=104
    DWORD=105
    LWORD=106
    ARRAY=107
    ANY=108
    XOR=109
    MOD=110
    AND=111
    OR=112
    NOT=113
    TRUE=114
    FALSE=115
    TWINCAT_SYSTEM=116
    HEX_NUMBER=117
    DEZ_NUMBER=118
    OCT_NUMBER=119
    BIN_NUMBER=120
    HEX_CHAR=121
    DIGIT_CHAR=122
    OCTAL_CHAR=123
    BIT=124
    IDENTIFIER=125
    DOT=126
    COMMA=127
    HASH=128
    COLON=129
    SEMICOLON=130
    GT=131
    GE=132
    UE=133
    LT=134
    LE=135
    EQ=136
    L_PAREN=137
    R_PAREN=138
    PLUS=139
    MINUS=140
    POWER=141
    MULTIPLY=142
    DIVIDE=143
    DEREFERENCE=144
    PERCENT=145
    COMMON_CHAR_VALUE=146
    X=147
    B=148
    W=149
    D=150
    L=151
    I=152
    Q=153
    M=154

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_number(self):
            return self.getTypedRuleContext(StructuredTextParser.Row_numberContext,0)


        def typed_number(self):
            return self.getTypedRuleContext(StructuredTextParser.Typed_numberContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = StructuredTextParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_number)
        try:
            self.state = 184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 182
                self.row_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 183
                self.typed_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_number(self):
            return self.getTypedRuleContext(StructuredTextParser.Row_numberContext,0)


        def elementary_data_types(self):
            return self.getTypedRuleContext(StructuredTextParser.Elementary_data_typesContext,0)


        def HASH(self):
            return self.getToken(StructuredTextParser.HASH, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_typed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTyped_number" ):
                listener.enterTyped_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTyped_number" ):
                listener.exitTyped_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTyped_number" ):
                return visitor.visitTyped_number(self)
            else:
                return visitor.visitChildren(self)




    def typed_number(self):

        localctx = StructuredTextParser.Typed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_typed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 1610612735) != 0:
                self.state = 186
                self.elementary_data_types()
                self.state = 187
                self.match(StructuredTextParser.HASH)


            self.state = 191
            self.row_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEZ_NUMBER(self):
            return self.getToken(StructuredTextParser.DEZ_NUMBER, 0)

        def HEX_NUMBER(self):
            return self.getToken(StructuredTextParser.HEX_NUMBER, 0)

        def OCT_NUMBER(self):
            return self.getToken(StructuredTextParser.OCT_NUMBER, 0)

        def BIN_NUMBER(self):
            return self.getToken(StructuredTextParser.BIN_NUMBER, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_row_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_number" ):
                listener.enterRow_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_number" ):
                listener.exitRow_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRow_number" ):
                return visitor.visitRow_number(self)
            else:
                return visitor.visitChildren(self)




    def row_number(self):

        localctx = StructuredTextParser.Row_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_row_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            _la = self._input.LA(1)
            if not((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & 15) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pou_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_Var_Decls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Global_Var_DeclsContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Global_Var_DeclsContext,i)


        def function_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Function_declarationContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Function_declarationContext,i)


        def function_block_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Function_block_declarationContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Function_block_declarationContext,i)


        def interface_Decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Interface_DeclContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Interface_DeclContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_pou_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPou_declaration" ):
                listener.enterPou_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPou_declaration" ):
                listener.exitPou_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPou_declaration" ):
                return visitor.visitPou_declaration(self)
            else:
                return visitor.visitChildren(self)




    def pou_declaration(self):

        localctx = StructuredTextParser.Pou_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pou_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 199
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 195
                    self.global_Var_Decls()
                    pass

                elif la_ == 2:
                    self.state = 196
                    self.function_declaration()
                    pass

                elif la_ == 3:
                    self.state = 197
                    self.function_block_declaration()
                    pass

                elif la_ == 4:
                    self.state = 198
                    self.interface_Decl()
                    pass


                self.state = 201 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((_la) & ~0x3f) == 0 and ((1 << _la) & 72059037683810304) != 0):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructuredTextParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_namespace_Name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_Name" ):
                listener.enterNamespace_Name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_Name" ):
                listener.exitNamespace_Name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespace_Name" ):
                return visitor.visitNamespace_Name(self)
            else:
                return visitor.visitChildren(self)




    def namespace_Name(self):

        localctx = StructuredTextParser.Namespace_NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_namespace_Name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self.match(StructuredTextParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STD_FUNC_NAME(self):
            return self.getToken(StructuredTextParser.STD_FUNC_NAME, 0)

        def derived_Func_Name(self):
            return self.getTypedRuleContext(StructuredTextParser.Derived_Func_NameContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_name" ):
                return visitor.visitFunction_name(self)
            else:
                return visitor.visitChildren(self)




    def function_name(self):

        localctx = StructuredTextParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_function_name)
        try:
            self.state = 207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.enterOuterAlt(localctx, 1)
                self.state = 205
                self.match(StructuredTextParser.STD_FUNC_NAME)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.derived_Func_Name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_AccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(StructuredTextParser.Function_nameContext,0)


        def namespace_Name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Namespace_NameContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Namespace_NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.DOT)
            else:
                return self.getToken(StructuredTextParser.DOT, i)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_func_Access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_Access" ):
                listener.enterFunc_Access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_Access" ):
                listener.exitFunc_Access(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_Access" ):
                return visitor.visitFunc_Access(self)
            else:
                return visitor.visitChildren(self)




    def func_Access(self):

        localctx = StructuredTextParser.Func_AccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_func_Access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 209
                    self.namespace_Name()
                    self.state = 210
                    self.match(StructuredTextParser.DOT) 
                self.state = 216
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 217
            self.function_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Derived_Func_NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructuredTextParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_derived_Func_Name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_Func_Name" ):
                listener.enterDerived_Func_Name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_Func_Name" ):
                listener.exitDerived_Func_Name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDerived_Func_Name" ):
                return visitor.visitDerived_Func_Name(self)
            else:
                return visitor.visitChildren(self)




    def derived_Func_Name(self):

        localctx = StructuredTextParser.Derived_Func_NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_derived_Func_Name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.match(StructuredTextParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(StructuredTextParser.FUNCTION, 0)

        def derived_Func_Name(self):
            return self.getTypedRuleContext(StructuredTextParser.Derived_Func_NameContext,0)


        def COLON(self):
            return self.getToken(StructuredTextParser.COLON, 0)

        def return_data_type(self):
            return self.getTypedRuleContext(StructuredTextParser.Return_data_typeContext,0)


        def function_body(self):
            return self.getTypedRuleContext(StructuredTextParser.Function_bodyContext,0)


        def END_FUNCTION(self):
            return self.getToken(StructuredTextParser.END_FUNCTION, 0)

        def DOC_STRING(self):
            return self.getToken(StructuredTextParser.DOC_STRING, 0)

        def var_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_blockContext,i)


        def var_const_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_const_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_const_blockContext,i)


        def var_in_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_blockContext,i)


        def var_out_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_blockContext,i)


        def var_inout_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_inout_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_inout_blockContext,i)


        def var_temp_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_temp_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_temp_blockContext,i)


        def var_external_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_external_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_external_blockContext,i)


        def var_external_const_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_external_const_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_external_const_blockContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_function_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_declaration" ):
                listener.enterFunction_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_declaration" ):
                listener.exitFunction_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_declaration" ):
                return visitor.visitFunction_declaration(self)
            else:
                return visitor.visitChildren(self)




    def function_declaration(self):

        localctx = StructuredTextParser.Function_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_function_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 221
                self.match(StructuredTextParser.DOC_STRING)


            self.state = 224
            self.match(StructuredTextParser.FUNCTION)
            self.state = 225
            self.derived_Func_Name()
            self.state = 226
            self.match(StructuredTextParser.COLON)
            self.state = 227
            self.return_data_type()
            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 358036170375954432) != 0:
                self.state = 236
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 228
                    self.var_block()
                    pass

                elif la_ == 2:
                    self.state = 229
                    self.var_const_block()
                    pass

                elif la_ == 3:
                    self.state = 230
                    self.var_in_block()
                    pass

                elif la_ == 4:
                    self.state = 231
                    self.var_out_block()
                    pass

                elif la_ == 5:
                    self.state = 232
                    self.var_inout_block()
                    pass

                elif la_ == 6:
                    self.state = 233
                    self.var_temp_block()
                    pass

                elif la_ == 7:
                    self.state = 234
                    self.var_external_block()
                    pass

                elif la_ == 8:
                    self.state = 235
                    self.var_external_const_block()
                    pass


                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 241
            self.function_body()
            self.state = 242
            self.match(StructuredTextParser.END_FUNCTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elementary_data_typesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(StructuredTextParser.BOOL, 0)

        def SINT(self):
            return self.getToken(StructuredTextParser.SINT, 0)

        def INT(self):
            return self.getToken(StructuredTextParser.INT, 0)

        def DINT(self):
            return self.getToken(StructuredTextParser.DINT, 0)

        def LINT(self):
            return self.getToken(StructuredTextParser.LINT, 0)

        def USINT(self):
            return self.getToken(StructuredTextParser.USINT, 0)

        def UINT(self):
            return self.getToken(StructuredTextParser.UINT, 0)

        def UDINT(self):
            return self.getToken(StructuredTextParser.UDINT, 0)

        def ULINT(self):
            return self.getToken(StructuredTextParser.ULINT, 0)

        def REAL(self):
            return self.getToken(StructuredTextParser.REAL, 0)

        def LREAL(self):
            return self.getToken(StructuredTextParser.LREAL, 0)

        def TIME(self):
            return self.getToken(StructuredTextParser.TIME, 0)

        def LTIME(self):
            return self.getToken(StructuredTextParser.LTIME, 0)

        def DATE(self):
            return self.getToken(StructuredTextParser.DATE, 0)

        def LDATE(self):
            return self.getToken(StructuredTextParser.LDATE, 0)

        def TIME_OF_DAY(self):
            return self.getToken(StructuredTextParser.TIME_OF_DAY, 0)

        def TOD(self):
            return self.getToken(StructuredTextParser.TOD, 0)

        def LTIME_OF_DAY(self):
            return self.getToken(StructuredTextParser.LTIME_OF_DAY, 0)

        def LTOD(self):
            return self.getToken(StructuredTextParser.LTOD, 0)

        def DATE_AND_TIME(self):
            return self.getToken(StructuredTextParser.DATE_AND_TIME, 0)

        def DT(self):
            return self.getToken(StructuredTextParser.DT, 0)

        def LDATE_AND_TIME(self):
            return self.getToken(StructuredTextParser.LDATE_AND_TIME, 0)

        def LDT(self):
            return self.getToken(StructuredTextParser.LDT, 0)

        def STRING(self):
            return self.getToken(StructuredTextParser.STRING, 0)

        def WSTRING(self):
            return self.getToken(StructuredTextParser.WSTRING, 0)

        def BYTE(self):
            return self.getToken(StructuredTextParser.BYTE, 0)

        def WORD(self):
            return self.getToken(StructuredTextParser.WORD, 0)

        def DWORD(self):
            return self.getToken(StructuredTextParser.DWORD, 0)

        def LWORD(self):
            return self.getToken(StructuredTextParser.LWORD, 0)

        def ANY(self):
            return self.getToken(StructuredTextParser.ANY, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_elementary_data_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementary_data_types" ):
                listener.enterElementary_data_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementary_data_types" ):
                listener.exitElementary_data_types(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementary_data_types" ):
                return visitor.visitElementary_data_types(self)
            else:
                return visitor.visitChildren(self)




    def elementary_data_types(self):

        localctx = StructuredTextParser.Elementary_data_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_elementary_data_types)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            _la = self._input.LA(1)
            if not((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 1610612735) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(StructuredTextParser.ARRAY, 0)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.NumberContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.NumberContext,i)


        def OF(self):
            return self.getToken(StructuredTextParser.OF, 0)

        def elementary_data_types(self):
            return self.getTypedRuleContext(StructuredTextParser.Elementary_data_typesContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.COMMA)
            else:
                return self.getToken(StructuredTextParser.COMMA, i)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_array_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_data_type" ):
                listener.enterArray_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_data_type" ):
                listener.exitArray_data_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_data_type" ):
                return visitor.visitArray_data_type(self)
            else:
                return visitor.visitChildren(self)




    def array_data_type(self):

        localctx = StructuredTextParser.Array_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_array_data_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(StructuredTextParser.ARRAY)
            self.state = 247
            self.match(StructuredTextParser.T__0)
            self.state = 248
            self.number()
            self.state = 249
            self.match(StructuredTextParser.T__1)
            self.state = 250
            self.number()
            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==127:
                self.state = 251
                self.match(StructuredTextParser.COMMA)
                self.state = 252
                self.number()
                self.state = 253
                self.match(StructuredTextParser.T__1)
                self.state = 254
                self.number()
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 261
            self.match(StructuredTextParser.T__2)
            self.state = 262
            self.match(StructuredTextParser.OF)
            self.state = 263
            self.elementary_data_types()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fb_Type_NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STD_FB_NAME(self):
            return self.getToken(StructuredTextParser.STD_FB_NAME, 0)

        def function_block_name(self):
            return self.getTypedRuleContext(StructuredTextParser.Function_block_nameContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_fb_Type_Name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFb_Type_Name" ):
                listener.enterFb_Type_Name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFb_Type_Name" ):
                listener.exitFb_Type_Name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFb_Type_Name" ):
                return visitor.visitFb_Type_Name(self)
            else:
                return visitor.visitChildren(self)




    def fb_Type_Name(self):

        localctx = StructuredTextParser.Fb_Type_NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_fb_Type_Name)
        try:
            self.state = 267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 265
                self.match(StructuredTextParser.STD_FB_NAME)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 266
                self.function_block_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fb_Type_AccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fb_Type_Name(self):
            return self.getTypedRuleContext(StructuredTextParser.Fb_Type_NameContext,0)


        def namespace_Name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Namespace_NameContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Namespace_NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.DOT)
            else:
                return self.getToken(StructuredTextParser.DOT, i)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_fb_Type_Access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFb_Type_Access" ):
                listener.enterFb_Type_Access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFb_Type_Access" ):
                listener.exitFb_Type_Access(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFb_Type_Access" ):
                return visitor.visitFb_Type_Access(self)
            else:
                return visitor.visitChildren(self)




    def fb_Type_Access(self):

        localctx = StructuredTextParser.Fb_Type_AccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fb_Type_Access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 269
                    self.namespace_Name()
                    self.state = 270
                    self.match(StructuredTextParser.DOT) 
                self.state = 276
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

            self.state = 277
            self.fb_Type_Name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_block_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructuredTextParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_function_block_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_block_name" ):
                listener.enterFunction_block_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_block_name" ):
                listener.exitFunction_block_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_block_name" ):
                return visitor.visitFunction_block_name(self)
            else:
                return visitor.visitChildren(self)




    def function_block_name(self):

        localctx = StructuredTextParser.Function_block_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_function_block_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(StructuredTextParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parent_function_block_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructuredTextParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_parent_function_block_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParent_function_block_name" ):
                listener.enterParent_function_block_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParent_function_block_name" ):
                listener.exitParent_function_block_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParent_function_block_name" ):
                return visitor.visitParent_function_block_name(self)
            else:
                return visitor.visitChildren(self)




    def parent_function_block_name(self):

        localctx = StructuredTextParser.Parent_function_block_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_parent_function_block_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.match(StructuredTextParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_block_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION_BLOCK(self):
            return self.getToken(StructuredTextParser.FUNCTION_BLOCK, 0)

        def function_block_name(self):
            return self.getTypedRuleContext(StructuredTextParser.Function_block_nameContext,0)


        def function_body(self):
            return self.getTypedRuleContext(StructuredTextParser.Function_bodyContext,0)


        def DOC_STRING(self):
            return self.getToken(StructuredTextParser.DOC_STRING, 0)

        def EXTENDS(self):
            return self.getToken(StructuredTextParser.EXTENDS, 0)

        def parent_function_block_name(self):
            return self.getTypedRuleContext(StructuredTextParser.Parent_function_block_nameContext,0)


        def IMPLEMENTS(self):
            return self.getToken(StructuredTextParser.IMPLEMENTS, 0)

        def interface_Type_Access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Interface_Type_AccessContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Interface_Type_AccessContext,i)


        def var_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_blockContext,i)


        def var_const_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_const_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_const_blockContext,i)


        def var_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_retain_blockContext,i)


        def var_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_non_retain_blockContext,i)


        def var_in_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_blockContext,i)


        def var_in_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_retain_blockContext,i)


        def var_in_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_non_retain_blockContext,i)


        def var_out_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_blockContext,i)


        def var_out_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_retain_blockContext,i)


        def var_out_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_non_retain_blockContext,i)


        def var_inout_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_inout_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_inout_blockContext,i)


        def var_temp_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_temp_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_temp_blockContext,i)


        def var_external_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_external_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_external_blockContext,i)


        def var_external_const_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_external_const_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_external_const_blockContext,i)


        def method_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Method_declarationContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Method_declarationContext,i)


        def property_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Property_declarationContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Property_declarationContext,i)


        def FINAL(self):
            return self.getToken(StructuredTextParser.FINAL, 0)

        def ABSTRACT(self):
            return self.getToken(StructuredTextParser.ABSTRACT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.COMMA)
            else:
                return self.getToken(StructuredTextParser.COMMA, i)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_function_block_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_block_declaration" ):
                listener.enterFunction_block_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_block_declaration" ):
                listener.exitFunction_block_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_block_declaration" ):
                return visitor.visitFunction_block_declaration(self)
            else:
                return visitor.visitChildren(self)




    def function_block_declaration(self):

        localctx = StructuredTextParser.Function_block_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_function_block_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 283
                self.match(StructuredTextParser.DOC_STRING)


            self.state = 286
            self.match(StructuredTextParser.FUNCTION_BLOCK)
            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67 or _la==71:
                self.state = 287
                _la = self._input.LA(1)
                if not(_la==67 or _la==71):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 290
            self.function_block_name()
            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 291
                self.match(StructuredTextParser.EXTENDS)
                self.state = 292
                self.parent_function_block_name()


            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 295
                self.match(StructuredTextParser.IMPLEMENTS)
                self.state = 296
                self.interface_Type_Access()
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==127:
                    self.state = 297
                    self.match(StructuredTextParser.COMMA)
                    self.state = 298
                    self.interface_Type_Access()
                    self.state = 303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 358036170375954432) != 0:
                self.state = 320
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 306
                    self.var_block()
                    pass

                elif la_ == 2:
                    self.state = 307
                    self.var_const_block()
                    pass

                elif la_ == 3:
                    self.state = 308
                    self.var_retain_block()
                    pass

                elif la_ == 4:
                    self.state = 309
                    self.var_non_retain_block()
                    pass

                elif la_ == 5:
                    self.state = 310
                    self.var_in_block()
                    pass

                elif la_ == 6:
                    self.state = 311
                    self.var_in_retain_block()
                    pass

                elif la_ == 7:
                    self.state = 312
                    self.var_in_non_retain_block()
                    pass

                elif la_ == 8:
                    self.state = 313
                    self.var_out_block()
                    pass

                elif la_ == 9:
                    self.state = 314
                    self.var_out_retain_block()
                    pass

                elif la_ == 10:
                    self.state = 315
                    self.var_out_non_retain_block()
                    pass

                elif la_ == 11:
                    self.state = 316
                    self.var_inout_block()
                    pass

                elif la_ == 12:
                    self.state = 317
                    self.var_temp_block()
                    pass

                elif la_ == 13:
                    self.state = 318
                    self.var_external_block()
                    pass

                elif la_ == 14:
                    self.state = 319
                    self.var_external_const_block()
                    pass


                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 325
            self.function_body()
            1
            self.state = 330
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 327
                    self.method_declaration() 
                self.state = 332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

            self.state = 336
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 333
                    self.property_declaration() 
                self.state = 338
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data_type(self):
            return self.getTypedRuleContext(StructuredTextParser.Data_typeContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_return_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_data_type" ):
                listener.enterReturn_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_data_type" ):
                listener.exitReturn_data_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_data_type" ):
                return visitor.visitReturn_data_type(self)
            else:
                return visitor.visitChildren(self)




    def return_data_type(self):

        localctx = StructuredTextParser.Return_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_return_data_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_defined_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructuredTextParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_user_defined_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_defined_data_type" ):
                listener.enterUser_defined_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_defined_data_type" ):
                listener.exitUser_defined_data_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUser_defined_data_type" ):
                return visitor.visitUser_defined_data_type(self)
            else:
                return visitor.visitChildren(self)




    def user_defined_data_type(self):

        localctx = StructuredTextParser.User_defined_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_user_defined_data_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(StructuredTextParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementary_data_types(self):
            return self.getTypedRuleContext(StructuredTextParser.Elementary_data_typesContext,0)


        def array_data_type(self):
            return self.getTypedRuleContext(StructuredTextParser.Array_data_typeContext,0)


        def user_defined_data_type(self):
            return self.getTypedRuleContext(StructuredTextParser.User_defined_data_typeContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_type" ):
                return visitor.visitData_type(self)
            else:
                return visitor.visitChildren(self)




    def data_type(self):

        localctx = StructuredTextParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_data_type)
        try:
            self.state = 346
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 343
                self.elementary_data_types()
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 344
                self.array_data_type()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 3)
                self.state = 345
                self.user_defined_data_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructuredTextParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_method_Name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_Name" ):
                listener.enterMethod_Name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_Name" ):
                listener.exitMethod_Name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_Name" ):
                return visitor.visitMethod_Name(self)
            else:
                return visitor.visitChildren(self)




    def method_Name(self):

        localctx = StructuredTextParser.Method_NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_method_Name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.match(StructuredTextParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructuredTextParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_property_Name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_Name" ):
                listener.enterProperty_Name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_Name" ):
                listener.exitProperty_Name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperty_Name" ):
                return visitor.visitProperty_Name(self)
            else:
                return visitor.visitChildren(self)




    def property_Name(self):

        localctx = StructuredTextParser.Property_NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_property_Name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.match(StructuredTextParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fb_Instance_NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_block_name(self):
            return self.getTypedRuleContext(StructuredTextParser.Function_block_nameContext,0)


        def namespace_Name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Namespace_NameContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Namespace_NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.DOT)
            else:
                return self.getToken(StructuredTextParser.DOT, i)

        def DEREFERENCE(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.DEREFERENCE)
            else:
                return self.getToken(StructuredTextParser.DEREFERENCE, i)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_fb_Instance_Name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFb_Instance_Name" ):
                listener.enterFb_Instance_Name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFb_Instance_Name" ):
                listener.exitFb_Instance_Name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFb_Instance_Name" ):
                return visitor.visitFb_Instance_Name(self)
            else:
                return visitor.visitChildren(self)




    def fb_Instance_Name(self):

        localctx = StructuredTextParser.Fb_Instance_NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_fb_Instance_Name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 352
                    self.namespace_Name()
                    self.state = 353
                    self.match(StructuredTextParser.DOT) 
                self.state = 359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

            self.state = 360
            self.function_block_name()
            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==144:
                self.state = 361
                self.match(StructuredTextParser.DEREFERENCE)
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_DeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(StructuredTextParser.INTERFACE, 0)

        def interface_Type_Name(self):
            return self.getTypedRuleContext(StructuredTextParser.Interface_Type_NameContext,0)


        def END_INTERFACE(self):
            return self.getToken(StructuredTextParser.END_INTERFACE, 0)

        def EXTENDS(self):
            return self.getToken(StructuredTextParser.EXTENDS, 0)

        def interface_Name_List(self):
            return self.getTypedRuleContext(StructuredTextParser.Interface_Name_ListContext,0)


        def method_Prototype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Method_PrototypeContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Method_PrototypeContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_interface_Decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_Decl" ):
                listener.enterInterface_Decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_Decl" ):
                listener.exitInterface_Decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_Decl" ):
                return visitor.visitInterface_Decl(self)
            else:
                return visitor.visitChildren(self)




    def interface_Decl(self):

        localctx = StructuredTextParser.Interface_DeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_interface_Decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(StructuredTextParser.INTERFACE)
            self.state = 368
            self.interface_Type_Name()
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 369
                self.match(StructuredTextParser.EXTENDS)
                self.state = 370
                self.interface_Name_List()


            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29 or _la==42:
                self.state = 373
                self.method_Prototype()
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 379
            self.match(StructuredTextParser.END_INTERFACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_PrototypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METHOD(self):
            return self.getToken(StructuredTextParser.METHOD, 0)

        def method_Name(self):
            return self.getTypedRuleContext(StructuredTextParser.Method_NameContext,0)


        def END_METHOD(self):
            return self.getToken(StructuredTextParser.END_METHOD, 0)

        def DOC_STRING(self):
            return self.getToken(StructuredTextParser.DOC_STRING, 0)

        def COLON(self):
            return self.getToken(StructuredTextParser.COLON, 0)

        def return_data_type(self):
            return self.getTypedRuleContext(StructuredTextParser.Return_data_typeContext,0)


        def var_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_blockContext,i)


        def var_const_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_const_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_const_blockContext,i)


        def var_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_retain_blockContext,i)


        def var_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_non_retain_blockContext,i)


        def var_in_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_blockContext,i)


        def var_in_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_retain_blockContext,i)


        def var_in_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_non_retain_blockContext,i)


        def var_out_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_blockContext,i)


        def var_out_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_retain_blockContext,i)


        def var_out_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_non_retain_blockContext,i)


        def var_inout_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_inout_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_inout_blockContext,i)


        def var_temp_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_temp_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_temp_blockContext,i)


        def var_external_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_external_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_external_blockContext,i)


        def var_external_const_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_external_const_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_external_const_blockContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_method_Prototype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_Prototype" ):
                listener.enterMethod_Prototype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_Prototype" ):
                listener.exitMethod_Prototype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_Prototype" ):
                return visitor.visitMethod_Prototype(self)
            else:
                return visitor.visitChildren(self)




    def method_Prototype(self):

        localctx = StructuredTextParser.Method_PrototypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_method_Prototype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 381
                self.match(StructuredTextParser.DOC_STRING)


            self.state = 384
            self.match(StructuredTextParser.METHOD)
            self.state = 385
            self.method_Name()
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 386
                self.match(StructuredTextParser.COLON)
                self.state = 387
                self.return_data_type()


            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 358036170375954432) != 0:
                self.state = 404
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 390
                    self.var_block()
                    pass

                elif la_ == 2:
                    self.state = 391
                    self.var_const_block()
                    pass

                elif la_ == 3:
                    self.state = 392
                    self.var_retain_block()
                    pass

                elif la_ == 4:
                    self.state = 393
                    self.var_non_retain_block()
                    pass

                elif la_ == 5:
                    self.state = 394
                    self.var_in_block()
                    pass

                elif la_ == 6:
                    self.state = 395
                    self.var_in_retain_block()
                    pass

                elif la_ == 7:
                    self.state = 396
                    self.var_in_non_retain_block()
                    pass

                elif la_ == 8:
                    self.state = 397
                    self.var_out_block()
                    pass

                elif la_ == 9:
                    self.state = 398
                    self.var_out_retain_block()
                    pass

                elif la_ == 10:
                    self.state = 399
                    self.var_out_non_retain_block()
                    pass

                elif la_ == 11:
                    self.state = 400
                    self.var_inout_block()
                    pass

                elif la_ == 12:
                    self.state = 401
                    self.var_temp_block()
                    pass

                elif la_ == 13:
                    self.state = 402
                    self.var_external_block()
                    pass

                elif la_ == 14:
                    self.state = 403
                    self.var_external_const_block()
                    pass


                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 409
            self.match(StructuredTextParser.END_METHOD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METHOD(self):
            return self.getToken(StructuredTextParser.METHOD, 0)

        def method_Name(self):
            return self.getTypedRuleContext(StructuredTextParser.Method_NameContext,0)


        def function_body(self):
            return self.getTypedRuleContext(StructuredTextParser.Function_bodyContext,0)


        def END_METHOD(self):
            return self.getToken(StructuredTextParser.END_METHOD, 0)

        def DOC_STRING(self):
            return self.getToken(StructuredTextParser.DOC_STRING, 0)

        def COLON(self):
            return self.getToken(StructuredTextParser.COLON, 0)

        def return_data_type(self):
            return self.getTypedRuleContext(StructuredTextParser.Return_data_typeContext,0)


        def var_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_blockContext,i)


        def var_const_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_const_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_const_blockContext,i)


        def var_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_retain_blockContext,i)


        def var_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_non_retain_blockContext,i)


        def var_in_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_blockContext,i)


        def var_in_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_retain_blockContext,i)


        def var_in_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_non_retain_blockContext,i)


        def var_out_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_blockContext,i)


        def var_out_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_retain_blockContext,i)


        def var_out_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_non_retain_blockContext,i)


        def var_inout_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_inout_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_inout_blockContext,i)


        def var_temp_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_temp_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_temp_blockContext,i)


        def var_external_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_external_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_external_blockContext,i)


        def var_external_const_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_external_const_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_external_const_blockContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_declaration" ):
                return visitor.visitMethod_declaration(self)
            else:
                return visitor.visitChildren(self)




    def method_declaration(self):

        localctx = StructuredTextParser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 411
                self.match(StructuredTextParser.DOC_STRING)


            self.state = 414
            self.match(StructuredTextParser.METHOD)
            self.state = 415
            self.method_Name()
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 416
                self.match(StructuredTextParser.COLON)
                self.state = 417
                self.return_data_type()


            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 358036170375954432) != 0:
                self.state = 434
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 420
                    self.var_block()
                    pass

                elif la_ == 2:
                    self.state = 421
                    self.var_const_block()
                    pass

                elif la_ == 3:
                    self.state = 422
                    self.var_retain_block()
                    pass

                elif la_ == 4:
                    self.state = 423
                    self.var_non_retain_block()
                    pass

                elif la_ == 5:
                    self.state = 424
                    self.var_in_block()
                    pass

                elif la_ == 6:
                    self.state = 425
                    self.var_in_retain_block()
                    pass

                elif la_ == 7:
                    self.state = 426
                    self.var_in_non_retain_block()
                    pass

                elif la_ == 8:
                    self.state = 427
                    self.var_out_block()
                    pass

                elif la_ == 9:
                    self.state = 428
                    self.var_out_retain_block()
                    pass

                elif la_ == 10:
                    self.state = 429
                    self.var_out_non_retain_block()
                    pass

                elif la_ == 11:
                    self.state = 430
                    self.var_inout_block()
                    pass

                elif la_ == 12:
                    self.state = 431
                    self.var_temp_block()
                    pass

                elif la_ == 13:
                    self.state = 432
                    self.var_external_block()
                    pass

                elif la_ == 14:
                    self.state = 433
                    self.var_external_const_block()
                    pass


                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 439
            self.function_body()
            self.state = 440
            self.match(StructuredTextParser.END_METHOD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_getter_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_GETTER(self):
            return self.getToken(StructuredTextParser.PROPERTY_GETTER, 0)

        def function_body(self):
            return self.getTypedRuleContext(StructuredTextParser.Function_bodyContext,0)


        def END_PROPERTY_GETTER(self):
            return self.getToken(StructuredTextParser.END_PROPERTY_GETTER, 0)

        def DOC_STRING(self):
            return self.getToken(StructuredTextParser.DOC_STRING, 0)

        def var_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_blockContext,i)


        def var_const_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_const_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_const_blockContext,i)


        def var_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_retain_blockContext,i)


        def var_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_non_retain_blockContext,i)


        def var_in_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_blockContext,i)


        def var_in_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_retain_blockContext,i)


        def var_in_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_non_retain_blockContext,i)


        def var_out_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_blockContext,i)


        def var_out_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_retain_blockContext,i)


        def var_out_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_non_retain_blockContext,i)


        def var_inout_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_inout_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_inout_blockContext,i)


        def var_temp_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_temp_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_temp_blockContext,i)


        def var_external_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_external_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_external_blockContext,i)


        def var_external_const_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_external_const_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_external_const_blockContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_property_getter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_getter_declaration" ):
                listener.enterProperty_getter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_getter_declaration" ):
                listener.exitProperty_getter_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperty_getter_declaration" ):
                return visitor.visitProperty_getter_declaration(self)
            else:
                return visitor.visitChildren(self)




    def property_getter_declaration(self):

        localctx = StructuredTextParser.Property_getter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_property_getter_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 442
                self.match(StructuredTextParser.DOC_STRING)


            self.state = 445
            self.match(StructuredTextParser.PROPERTY_GETTER)
            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 358036170375954432) != 0:
                self.state = 460
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 446
                    self.var_block()
                    pass

                elif la_ == 2:
                    self.state = 447
                    self.var_const_block()
                    pass

                elif la_ == 3:
                    self.state = 448
                    self.var_retain_block()
                    pass

                elif la_ == 4:
                    self.state = 449
                    self.var_non_retain_block()
                    pass

                elif la_ == 5:
                    self.state = 450
                    self.var_in_block()
                    pass

                elif la_ == 6:
                    self.state = 451
                    self.var_in_retain_block()
                    pass

                elif la_ == 7:
                    self.state = 452
                    self.var_in_non_retain_block()
                    pass

                elif la_ == 8:
                    self.state = 453
                    self.var_out_block()
                    pass

                elif la_ == 9:
                    self.state = 454
                    self.var_out_retain_block()
                    pass

                elif la_ == 10:
                    self.state = 455
                    self.var_out_non_retain_block()
                    pass

                elif la_ == 11:
                    self.state = 456
                    self.var_inout_block()
                    pass

                elif la_ == 12:
                    self.state = 457
                    self.var_temp_block()
                    pass

                elif la_ == 13:
                    self.state = 458
                    self.var_external_block()
                    pass

                elif la_ == 14:
                    self.state = 459
                    self.var_external_const_block()
                    pass


                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 465
            self.function_body()
            self.state = 466
            self.match(StructuredTextParser.END_PROPERTY_GETTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_setter_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_SETTER(self):
            return self.getToken(StructuredTextParser.PROPERTY_SETTER, 0)

        def function_body(self):
            return self.getTypedRuleContext(StructuredTextParser.Function_bodyContext,0)


        def END_PROPERTY_SETTER(self):
            return self.getToken(StructuredTextParser.END_PROPERTY_SETTER, 0)

        def DOC_STRING(self):
            return self.getToken(StructuredTextParser.DOC_STRING, 0)

        def var_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_blockContext,i)


        def var_const_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_const_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_const_blockContext,i)


        def var_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_retain_blockContext,i)


        def var_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_non_retain_blockContext,i)


        def var_in_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_blockContext,i)


        def var_in_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_retain_blockContext,i)


        def var_in_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_in_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_in_non_retain_blockContext,i)


        def var_out_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_blockContext,i)


        def var_out_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_retain_blockContext,i)


        def var_out_non_retain_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_out_non_retain_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_out_non_retain_blockContext,i)


        def var_inout_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_inout_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_inout_blockContext,i)


        def var_temp_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_temp_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_temp_blockContext,i)


        def var_external_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_external_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_external_blockContext,i)


        def var_external_const_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Var_external_const_blockContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Var_external_const_blockContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_property_setter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_setter_declaration" ):
                listener.enterProperty_setter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_setter_declaration" ):
                listener.exitProperty_setter_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperty_setter_declaration" ):
                return visitor.visitProperty_setter_declaration(self)
            else:
                return visitor.visitChildren(self)




    def property_setter_declaration(self):

        localctx = StructuredTextParser.Property_setter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_property_setter_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 468
                self.match(StructuredTextParser.DOC_STRING)


            self.state = 471
            self.match(StructuredTextParser.PROPERTY_SETTER)
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 358036170375954432) != 0:
                self.state = 486
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 472
                    self.var_block()
                    pass

                elif la_ == 2:
                    self.state = 473
                    self.var_const_block()
                    pass

                elif la_ == 3:
                    self.state = 474
                    self.var_retain_block()
                    pass

                elif la_ == 4:
                    self.state = 475
                    self.var_non_retain_block()
                    pass

                elif la_ == 5:
                    self.state = 476
                    self.var_in_block()
                    pass

                elif la_ == 6:
                    self.state = 477
                    self.var_in_retain_block()
                    pass

                elif la_ == 7:
                    self.state = 478
                    self.var_in_non_retain_block()
                    pass

                elif la_ == 8:
                    self.state = 479
                    self.var_out_block()
                    pass

                elif la_ == 9:
                    self.state = 480
                    self.var_out_retain_block()
                    pass

                elif la_ == 10:
                    self.state = 481
                    self.var_out_non_retain_block()
                    pass

                elif la_ == 11:
                    self.state = 482
                    self.var_inout_block()
                    pass

                elif la_ == 12:
                    self.state = 483
                    self.var_temp_block()
                    pass

                elif la_ == 13:
                    self.state = 484
                    self.var_external_block()
                    pass

                elif la_ == 14:
                    self.state = 485
                    self.var_external_const_block()
                    pass


                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 491
            self.function_body()
            self.state = 492
            self.match(StructuredTextParser.END_PROPERTY_SETTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY(self):
            return self.getToken(StructuredTextParser.PROPERTY, 0)

        def property_Name(self):
            return self.getTypedRuleContext(StructuredTextParser.Property_NameContext,0)


        def END_PROPERTY(self):
            return self.getToken(StructuredTextParser.END_PROPERTY, 0)

        def DOC_STRING(self):
            return self.getToken(StructuredTextParser.DOC_STRING, 0)

        def COLON(self):
            return self.getToken(StructuredTextParser.COLON, 0)

        def return_data_type(self):
            return self.getTypedRuleContext(StructuredTextParser.Return_data_typeContext,0)


        def property_getter_declaration(self):
            return self.getTypedRuleContext(StructuredTextParser.Property_getter_declarationContext,0)


        def property_setter_declaration(self):
            return self.getTypedRuleContext(StructuredTextParser.Property_setter_declarationContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_property_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_declaration" ):
                listener.enterProperty_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_declaration" ):
                listener.exitProperty_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperty_declaration" ):
                return visitor.visitProperty_declaration(self)
            else:
                return visitor.visitChildren(self)




    def property_declaration(self):

        localctx = StructuredTextParser.Property_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_property_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 494
                self.match(StructuredTextParser.DOC_STRING)


            self.state = 497
            self.match(StructuredTextParser.PROPERTY)
            self.state = 498
            self.property_Name()
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 499
                self.match(StructuredTextParser.COLON)
                self.state = 500
                self.return_data_type()


            self.state = 504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 503
                self.property_getter_declaration()


            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29 or _la==48:
                self.state = 506
                self.property_setter_declaration()


            self.state = 509
            self.match(StructuredTextParser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolic_Variable(self):
            return self.getTypedRuleContext(StructuredTextParser.Symbolic_VariableContext,0)


        def fb_Instance_Name(self):
            return self.getTypedRuleContext(StructuredTextParser.Fb_Instance_NameContext,0)


        def NULL(self):
            return self.getToken(StructuredTextParser.NULL, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_interface_Value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_Value" ):
                listener.enterInterface_Value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_Value" ):
                listener.exitInterface_Value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_Value" ):
                return visitor.visitInterface_Value(self)
            else:
                return visitor.visitChildren(self)




    def interface_Value(self):

        localctx = StructuredTextParser.Interface_ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_interface_Value)
        try:
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 511
                self.symbolic_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 512
                self.fb_Instance_Name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 513
                self.match(StructuredTextParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_Name_ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_Type_Access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Interface_Type_AccessContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Interface_Type_AccessContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.COMMA)
            else:
                return self.getToken(StructuredTextParser.COMMA, i)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_interface_Name_List

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_Name_List" ):
                listener.enterInterface_Name_List(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_Name_List" ):
                listener.exitInterface_Name_List(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_Name_List" ):
                return visitor.visitInterface_Name_List(self)
            else:
                return visitor.visitChildren(self)




    def interface_Name_List(self):

        localctx = StructuredTextParser.Interface_Name_ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_interface_Name_List)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.interface_Type_Access()
            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==127:
                self.state = 517
                self.match(StructuredTextParser.COMMA)
                self.state = 518
                self.interface_Type_Access()
                self.state = 523
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_Type_NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructuredTextParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_interface_Type_Name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_Type_Name" ):
                listener.enterInterface_Type_Name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_Type_Name" ):
                listener.exitInterface_Type_Name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_Type_Name" ):
                return visitor.visitInterface_Type_Name(self)
            else:
                return visitor.visitChildren(self)




    def interface_Type_Name(self):

        localctx = StructuredTextParser.Interface_Type_NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_interface_Type_Name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.match(StructuredTextParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_Type_AccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_Type_Name(self):
            return self.getTypedRuleContext(StructuredTextParser.Interface_Type_NameContext,0)


        def namespace_Name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Namespace_NameContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Namespace_NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.DOT)
            else:
                return self.getToken(StructuredTextParser.DOT, i)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_interface_Type_Access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_Type_Access" ):
                listener.enterInterface_Type_Access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_Type_Access" ):
                listener.exitInterface_Type_Access(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_Type_Access" ):
                return visitor.visitInterface_Type_Access(self)
            else:
                return visitor.visitChildren(self)




    def interface_Type_Access(self):

        localctx = StructuredTextParser.Interface_Type_AccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_interface_Type_Access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 526
                    self.namespace_Name()
                    self.state = 527
                    self.match(StructuredTextParser.DOT) 
                self.state = 533
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

            self.state = 534
            self.interface_Type_Name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructuredTextParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_interface_Name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_Name" ):
                listener.enterInterface_Name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_Name" ):
                listener.exitInterface_Name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_Name" ):
                return visitor.visitInterface_Name(self)
            else:
                return visitor.visitChildren(self)




    def interface_Name(self):

        localctx = StructuredTextParser.Interface_NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_interface_Name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(StructuredTextParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Access_SpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(StructuredTextParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(StructuredTextParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(StructuredTextParser.PRIVATE, 0)

        def INTERNAL(self):
            return self.getToken(StructuredTextParser.INTERNAL, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_access_Spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccess_Spec" ):
                listener.enterAccess_Spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccess_Spec" ):
                listener.exitAccess_Spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccess_Spec" ):
                return visitor.visitAccess_Spec(self)
            else:
                return visitor.visitChildren(self)




    def access_Spec(self):

        localctx = StructuredTextParser.Access_SpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_access_Spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            _la = self._input.LA(1)
            if not((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & 15) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(StructuredTextParser.VAR, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def declaration_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Declaration_stmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Declaration_stmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_block" ):
                listener.enterVar_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_block" ):
                listener.exitVar_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_block" ):
                return visitor.visitVar_block(self)
            else:
                return visitor.visitChildren(self)




    def var_block(self):

        localctx = StructuredTextParser.Var_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_var_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.match(StructuredTextParser.VAR)
            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 541
                self.declaration_stmt()
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 547
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_const_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(StructuredTextParser.VAR, 0)

        def CONSTANT(self):
            return self.getToken(StructuredTextParser.CONSTANT, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def declaration_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Declaration_stmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Declaration_stmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_const_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_const_block" ):
                listener.enterVar_const_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_const_block" ):
                listener.exitVar_const_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_const_block" ):
                return visitor.visitVar_const_block(self)
            else:
                return visitor.visitChildren(self)




    def var_const_block(self):

        localctx = StructuredTextParser.Var_const_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_var_const_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(StructuredTextParser.VAR)
            self.state = 550
            self.match(StructuredTextParser.CONSTANT)
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 551
                self.declaration_stmt()
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 557
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_retain_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(StructuredTextParser.VAR, 0)

        def RETAIN(self):
            return self.getToken(StructuredTextParser.RETAIN, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def declaration_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Declaration_stmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Declaration_stmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_retain_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_retain_block" ):
                listener.enterVar_retain_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_retain_block" ):
                listener.exitVar_retain_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_retain_block" ):
                return visitor.visitVar_retain_block(self)
            else:
                return visitor.visitChildren(self)




    def var_retain_block(self):

        localctx = StructuredTextParser.Var_retain_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_var_retain_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(StructuredTextParser.VAR)
            self.state = 560
            self.match(StructuredTextParser.RETAIN)
            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 561
                self.declaration_stmt()
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 567
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_non_retain_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(StructuredTextParser.VAR, 0)

        def NON_RETAIN(self):
            return self.getToken(StructuredTextParser.NON_RETAIN, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def declaration_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Declaration_stmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Declaration_stmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_non_retain_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_non_retain_block" ):
                listener.enterVar_non_retain_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_non_retain_block" ):
                listener.exitVar_non_retain_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_non_retain_block" ):
                return visitor.visitVar_non_retain_block(self)
            else:
                return visitor.visitChildren(self)




    def var_non_retain_block(self):

        localctx = StructuredTextParser.Var_non_retain_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_var_non_retain_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(StructuredTextParser.VAR)
            self.state = 570
            self.match(StructuredTextParser.NON_RETAIN)
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 571
                self.declaration_stmt()
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 577
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_in_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_INPUT(self):
            return self.getToken(StructuredTextParser.VAR_INPUT, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def declaration_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Declaration_stmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Declaration_stmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_in_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_in_block" ):
                listener.enterVar_in_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_in_block" ):
                listener.exitVar_in_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_in_block" ):
                return visitor.visitVar_in_block(self)
            else:
                return visitor.visitChildren(self)




    def var_in_block(self):

        localctx = StructuredTextParser.Var_in_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_var_in_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(StructuredTextParser.VAR_INPUT)
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 580
                self.declaration_stmt()
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 586
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_in_retain_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_INPUT(self):
            return self.getToken(StructuredTextParser.VAR_INPUT, 0)

        def RETAIN(self):
            return self.getToken(StructuredTextParser.RETAIN, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def declaration_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Declaration_stmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Declaration_stmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_in_retain_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_in_retain_block" ):
                listener.enterVar_in_retain_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_in_retain_block" ):
                listener.exitVar_in_retain_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_in_retain_block" ):
                return visitor.visitVar_in_retain_block(self)
            else:
                return visitor.visitChildren(self)




    def var_in_retain_block(self):

        localctx = StructuredTextParser.Var_in_retain_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_var_in_retain_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(StructuredTextParser.VAR_INPUT)
            self.state = 589
            self.match(StructuredTextParser.RETAIN)
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 590
                self.declaration_stmt()
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 596
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_in_non_retain_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_INPUT(self):
            return self.getToken(StructuredTextParser.VAR_INPUT, 0)

        def NON_RETAIN(self):
            return self.getToken(StructuredTextParser.NON_RETAIN, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def declaration_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Declaration_stmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Declaration_stmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_in_non_retain_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_in_non_retain_block" ):
                listener.enterVar_in_non_retain_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_in_non_retain_block" ):
                listener.exitVar_in_non_retain_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_in_non_retain_block" ):
                return visitor.visitVar_in_non_retain_block(self)
            else:
                return visitor.visitChildren(self)




    def var_in_non_retain_block(self):

        localctx = StructuredTextParser.Var_in_non_retain_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_var_in_non_retain_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(StructuredTextParser.VAR_INPUT)
            self.state = 599
            self.match(StructuredTextParser.NON_RETAIN)
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 600
                self.declaration_stmt()
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 606
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_out_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_OUTPUT(self):
            return self.getToken(StructuredTextParser.VAR_OUTPUT, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def declaration_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Declaration_stmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Declaration_stmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_out_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_out_block" ):
                listener.enterVar_out_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_out_block" ):
                listener.exitVar_out_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_out_block" ):
                return visitor.visitVar_out_block(self)
            else:
                return visitor.visitChildren(self)




    def var_out_block(self):

        localctx = StructuredTextParser.Var_out_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_var_out_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(StructuredTextParser.VAR_OUTPUT)
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 609
                self.declaration_stmt()
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 615
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_out_retain_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_OUTPUT(self):
            return self.getToken(StructuredTextParser.VAR_OUTPUT, 0)

        def RETAIN(self):
            return self.getToken(StructuredTextParser.RETAIN, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def declaration_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Declaration_stmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Declaration_stmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_out_retain_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_out_retain_block" ):
                listener.enterVar_out_retain_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_out_retain_block" ):
                listener.exitVar_out_retain_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_out_retain_block" ):
                return visitor.visitVar_out_retain_block(self)
            else:
                return visitor.visitChildren(self)




    def var_out_retain_block(self):

        localctx = StructuredTextParser.Var_out_retain_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_var_out_retain_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(StructuredTextParser.VAR_OUTPUT)
            self.state = 618
            self.match(StructuredTextParser.RETAIN)
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 619
                self.declaration_stmt()
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 625
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_out_non_retain_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_OUTPUT(self):
            return self.getToken(StructuredTextParser.VAR_OUTPUT, 0)

        def NON_RETAIN(self):
            return self.getToken(StructuredTextParser.NON_RETAIN, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def declaration_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Declaration_stmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Declaration_stmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_out_non_retain_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_out_non_retain_block" ):
                listener.enterVar_out_non_retain_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_out_non_retain_block" ):
                listener.exitVar_out_non_retain_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_out_non_retain_block" ):
                return visitor.visitVar_out_non_retain_block(self)
            else:
                return visitor.visitChildren(self)




    def var_out_non_retain_block(self):

        localctx = StructuredTextParser.Var_out_non_retain_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_var_out_non_retain_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.match(StructuredTextParser.VAR_OUTPUT)
            self.state = 628
            self.match(StructuredTextParser.NON_RETAIN)
            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 629
                self.declaration_stmt()
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 635
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_inout_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_IN_OUT(self):
            return self.getToken(StructuredTextParser.VAR_IN_OUT, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def declaration_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Declaration_stmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Declaration_stmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_inout_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_inout_block" ):
                listener.enterVar_inout_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_inout_block" ):
                listener.exitVar_inout_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_inout_block" ):
                return visitor.visitVar_inout_block(self)
            else:
                return visitor.visitChildren(self)




    def var_inout_block(self):

        localctx = StructuredTextParser.Var_inout_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_var_inout_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(StructuredTextParser.VAR_IN_OUT)
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 638
                self.declaration_stmt()
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 644
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_temp_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_TEMP(self):
            return self.getToken(StructuredTextParser.VAR_TEMP, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def declaration_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Declaration_stmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Declaration_stmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_temp_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_temp_block" ):
                listener.enterVar_temp_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_temp_block" ):
                listener.exitVar_temp_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_temp_block" ):
                return visitor.visitVar_temp_block(self)
            else:
                return visitor.visitChildren(self)




    def var_temp_block(self):

        localctx = StructuredTextParser.Var_temp_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_var_temp_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(StructuredTextParser.VAR_TEMP)
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 647
                self.declaration_stmt()
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 653
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_external_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_EXTERNAL(self):
            return self.getToken(StructuredTextParser.VAR_EXTERNAL, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def declaration_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Declaration_stmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Declaration_stmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_external_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_external_block" ):
                listener.enterVar_external_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_external_block" ):
                listener.exitVar_external_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_external_block" ):
                return visitor.visitVar_external_block(self)
            else:
                return visitor.visitChildren(self)




    def var_external_block(self):

        localctx = StructuredTextParser.Var_external_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_var_external_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(StructuredTextParser.VAR_EXTERNAL)
            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 656
                self.declaration_stmt()
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 662
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_external_const_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_EXTERNAL(self):
            return self.getToken(StructuredTextParser.VAR_EXTERNAL, 0)

        def CONSTANT(self):
            return self.getToken(StructuredTextParser.CONSTANT, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def declaration_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Declaration_stmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Declaration_stmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_external_const_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_external_const_block" ):
                listener.enterVar_external_const_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_external_const_block" ):
                listener.exitVar_external_const_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_external_const_block" ):
                return visitor.visitVar_external_const_block(self)
            else:
                return visitor.visitChildren(self)




    def var_external_const_block(self):

        localctx = StructuredTextParser.Var_external_const_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_var_external_const_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.match(StructuredTextParser.VAR_EXTERNAL)
            self.state = 665
            self.match(StructuredTextParser.CONSTANT)
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 666
                self.declaration_stmt()
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 672
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declaration_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructuredTextParser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(StructuredTextParser.COLON, 0)

        def data_type(self):
            return self.getTypedRuleContext(StructuredTextParser.Data_typeContext,0)


        def SEMICOLON(self):
            return self.getToken(StructuredTextParser.SEMICOLON, 0)

        def namespace_Name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Namespace_NameContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Namespace_NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.DOT)
            else:
                return self.getToken(StructuredTextParser.DOT, i)

        def TWINCAT_SYSTEM(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.TWINCAT_SYSTEM)
            else:
                return self.getToken(StructuredTextParser.TWINCAT_SYSTEM, i)

        def ASSIGNE(self):
            return self.getToken(StructuredTextParser.ASSIGNE, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(StructuredTextParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_declaration_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration_stmt" ):
                listener.enterDeclaration_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration_stmt" ):
                listener.exitDeclaration_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration_stmt" ):
                return visitor.visitDeclaration_stmt(self)
            else:
                return visitor.visitChildren(self)




    def declaration_stmt(self):

        localctx = StructuredTextParser.Declaration_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_declaration_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(StructuredTextParser.IDENTIFIER)
            self.state = 675
            self.match(StructuredTextParser.COLON)
            self.state = 683
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 681
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [125]:
                        self.state = 676
                        self.namespace_Name()
                        self.state = 677
                        self.match(StructuredTextParser.DOT)
                        pass
                    elif token in [116]:
                        self.state = 679
                        self.match(StructuredTextParser.TWINCAT_SYSTEM)
                        self.state = 680
                        self.match(StructuredTextParser.DOT)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 686
            self.data_type()
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 687
                self.match(StructuredTextParser.ASSIGNE)
                self.state = 688
                self.constant_expression()


            self.state = 691
            self.match(StructuredTextParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(StructuredTextParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_expression" ):
                return visitor.visitConstant_expression(self)
            else:
                return visitor.visitChildren(self)




    def constant_expression(self):

        localctx = StructuredTextParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_constant_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext

        def primary_Expr(self):
            return self.getTypedRuleContext(StructuredTextParser.Primary_ExprContext,0)


        def IDENTIFIER(self):
            return self.getToken(StructuredTextParser.IDENTIFIER, 0)

        def DEREFERENCE(self):
            return self.getToken(StructuredTextParser.DEREFERENCE, 0)

        def unary(self):
            return self.getTypedRuleContext(StructuredTextParser.UnaryContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.ExpressionContext,i)


        def POWER(self):
            return self.getToken(StructuredTextParser.POWER, 0)

        def term(self):
            return self.getTypedRuleContext(StructuredTextParser.TermContext,0)


        def add_sub(self):
            return self.getTypedRuleContext(StructuredTextParser.Add_subContext,0)


        def comparator(self):
            return self.getTypedRuleContext(StructuredTextParser.ComparatorContext,0)


        def AND(self):
            return self.getToken(StructuredTextParser.AND, 0)

        def XOR(self):
            return self.getToken(StructuredTextParser.XOR, 0)

        def OR(self):
            return self.getToken(StructuredTextParser.OR, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = StructuredTextParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 100
        self.enterRecursionRule(localctx, 100, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 696
                self.primary_Expr()
                pass

            elif la_ == 2:
                self.state = 697
                self.match(StructuredTextParser.IDENTIFIER)
                pass

            elif la_ == 3:
                self.state = 698
                self.match(StructuredTextParser.IDENTIFIER)
                self.state = 699
                self.match(StructuredTextParser.DEREFERENCE)
                pass

            elif la_ == 4:
                self.state = 700
                self.unary()
                self.state = 701
                self.expression(8)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 731
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 729
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        localctx = StructuredTextParser.ExpressionContext(self, _parentctx, _parentState)
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 705
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 706
                        self.match(StructuredTextParser.POWER)
                        self.state = 707
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 2:
                        localctx = StructuredTextParser.ExpressionContext(self, _parentctx, _parentState)
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 708
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 709
                        self.term()
                        self.state = 710
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 3:
                        localctx = StructuredTextParser.ExpressionContext(self, _parentctx, _parentState)
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 712
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 713
                        self.add_sub()
                        self.state = 714
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 4:
                        localctx = StructuredTextParser.ExpressionContext(self, _parentctx, _parentState)
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 716
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 717
                        self.comparator()
                        self.state = 718
                        localctx.right = self.expression(5)
                        pass

                    elif la_ == 5:
                        localctx = StructuredTextParser.ExpressionContext(self, _parentctx, _parentState)
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 720
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 721
                        self.match(StructuredTextParser.AND)
                        self.state = 722
                        localctx.right = self.expression(4)
                        pass

                    elif la_ == 6:
                        localctx = StructuredTextParser.ExpressionContext(self, _parentctx, _parentState)
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 723
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 724
                        self.match(StructuredTextParser.XOR)
                        self.state = 725
                        localctx.right = self.expression(3)
                        pass

                    elif la_ == 7:
                        localctx = StructuredTextParser.ExpressionContext(self, _parentctx, _parentState)
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 726
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 727
                        self.match(StructuredTextParser.OR)
                        self.state = 728
                        localctx.right = self.expression(2)
                        pass

             
                self.state = 733
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Primary_ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(StructuredTextParser.NumberContext,0)


        def TRUE(self):
            return self.getToken(StructuredTextParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(StructuredTextParser.FALSE, 0)

        def variable_Access(self):
            return self.getTypedRuleContext(StructuredTextParser.Variable_AccessContext,0)


        def func_Call(self):
            return self.getTypedRuleContext(StructuredTextParser.Func_CallContext,0)


        def L_PAREN(self):
            return self.getToken(StructuredTextParser.L_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(StructuredTextParser.ExpressionContext,0)


        def R_PAREN(self):
            return self.getToken(StructuredTextParser.R_PAREN, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_primary_Expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_Expr" ):
                listener.enterPrimary_Expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_Expr" ):
                listener.exitPrimary_Expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary_Expr" ):
                return visitor.visitPrimary_Expr(self)
            else:
                return visitor.visitChildren(self)




    def primary_Expr(self):

        localctx = StructuredTextParser.Primary_ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_primary_Expr)
        try:
            self.state = 743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 734
                self.number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 735
                self.match(StructuredTextParser.TRUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 736
                self.match(StructuredTextParser.FALSE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 737
                self.variable_Access()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 738
                self.func_Call()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 739
                self.match(StructuredTextParser.L_PAREN)
                self.state = 740
                self.expression(0)
                self.state = 741
                self.match(StructuredTextParser.R_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLY(self):
            return self.getToken(StructuredTextParser.MULTIPLY, 0)

        def DIVIDE(self):
            return self.getToken(StructuredTextParser.DIVIDE, 0)

        def MOD(self):
            return self.getToken(StructuredTextParser.MOD, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)




    def term(self):

        localctx = StructuredTextParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            _la = self._input.LA(1)
            if not((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 12884901889) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(StructuredTextParser.GT, 0)

        def GE(self):
            return self.getToken(StructuredTextParser.GE, 0)

        def LT(self):
            return self.getToken(StructuredTextParser.LT, 0)

        def LE(self):
            return self.getToken(StructuredTextParser.LE, 0)

        def EQ(self):
            return self.getToken(StructuredTextParser.EQ, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_comparator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparator" ):
                listener.enterComparator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparator" ):
                listener.exitComparator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparator" ):
                return visitor.visitComparator(self)
            else:
                return visitor.visitChildren(self)




    def comparator(self):

        localctx = StructuredTextParser.ComparatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_comparator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            _la = self._input.LA(1)
            if not((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 59) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(StructuredTextParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(StructuredTextParser.MINUS, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_add_sub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_sub" ):
                listener.enterAdd_sub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_sub" ):
                listener.exitAdd_sub(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_sub" ):
                return visitor.visitAdd_sub(self)
            else:
                return visitor.visitChildren(self)




    def add_sub(self):

        localctx = StructuredTextParser.Add_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_add_sub)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            _la = self._input.LA(1)
            if not(_la==139 or _la==140):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(StructuredTextParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(StructuredTextParser.MINUS, 0)

        def NOT(self):
            return self.getToken(StructuredTextParser.NOT, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_unary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary" ):
                listener.enterUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary" ):
                listener.exitUnary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary" ):
                return visitor.visitUnary(self)
            else:
                return visitor.visitChildren(self)




    def unary(self):

        localctx = StructuredTextParser.UnaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_unary)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            _la = self._input.LA(1)
            if not((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & 201326593) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multibit_Part_AccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(StructuredTextParser.DOT, 0)

        def PERCENT(self):
            return self.getToken(StructuredTextParser.PERCENT, 0)

        def X(self):
            return self.getToken(StructuredTextParser.X, 0)

        def B(self):
            return self.getToken(StructuredTextParser.B, 0)

        def W(self):
            return self.getToken(StructuredTextParser.W, 0)

        def D(self):
            return self.getToken(StructuredTextParser.D, 0)

        def L(self):
            return self.getToken(StructuredTextParser.L, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_multibit_Part_Access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultibit_Part_Access" ):
                listener.enterMultibit_Part_Access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultibit_Part_Access" ):
                listener.exitMultibit_Part_Access(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultibit_Part_Access" ):
                return visitor.visitMultibit_Part_Access(self)
            else:
                return visitor.visitChildren(self)




    def multibit_Part_Access(self):

        localctx = StructuredTextParser.Multibit_Part_AccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_multibit_Part_Access)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(StructuredTextParser.DOT)

            self.state = 754
            self.match(StructuredTextParser.PERCENT)
            self.state = 756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 755
                _la = self._input.LA(1)
                if not((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 31) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def direct_Variable(self):
            return self.getTypedRuleContext(StructuredTextParser.Direct_VariableContext,0)


        def symbolic_Variable(self):
            return self.getTypedRuleContext(StructuredTextParser.Symbolic_VariableContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = StructuredTextParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_variable)
        try:
            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145]:
                self.enterOuterAlt(localctx, 1)
                self.state = 758
                self.direct_Variable()
                pass
            elif token in [72, 125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 759
                self.symbolic_Variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Symbolic_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_Access(self):
            return self.getTypedRuleContext(StructuredTextParser.Var_AccessContext,0)


        def multi_Elem_Var(self):
            return self.getTypedRuleContext(StructuredTextParser.Multi_Elem_VarContext,0)


        def THIS(self):
            return self.getToken(StructuredTextParser.THIS, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.DOT)
            else:
                return self.getToken(StructuredTextParser.DOT, i)

        def namespace_Name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Namespace_NameContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Namespace_NameContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_symbolic_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolic_Variable" ):
                listener.enterSymbolic_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolic_Variable" ):
                listener.exitSymbolic_Variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolic_Variable" ):
                return visitor.visitSymbolic_Variable(self)
            else:
                return visitor.visitChildren(self)




    def symbolic_Variable(self):

        localctx = StructuredTextParser.Symbolic_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_symbolic_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 762
                self.match(StructuredTextParser.THIS)
                self.state = 763
                self.match(StructuredTextParser.DOT)

            elif la_ == 2:
                self.state = 767 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 764
                        self.namespace_Name()
                        self.state = 765
                        self.match(StructuredTextParser.DOT)

                    else:
                        raise NoViableAltException(self)
                    self.state = 769 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)



            self.state = 775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 773
                self.var_Access()
                pass

            elif la_ == 2:
                self.state = 774
                self.multi_Elem_Var()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_AccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_Name(self):
            return self.getTypedRuleContext(StructuredTextParser.Variable_NameContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_var_Access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_Access" ):
                listener.enterVar_Access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_Access" ):
                listener.exitVar_Access(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_Access" ):
                return visitor.visitVar_Access(self)
            else:
                return visitor.visitChildren(self)




    def var_Access(self):

        localctx = StructuredTextParser.Var_AccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_var_Access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.variable_Name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructuredTextParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_variable_Name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_Name" ):
                listener.enterVariable_Name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_Name" ):
                listener.exitVariable_Name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_Name" ):
                return visitor.visitVariable_Name(self)
            else:
                return visitor.visitChildren(self)




    def variable_Name(self):

        localctx = StructuredTextParser.Variable_NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_variable_Name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(StructuredTextParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_Elem_VarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_Access(self):
            return self.getTypedRuleContext(StructuredTextParser.Var_AccessContext,0)


        def subscript_List(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Subscript_ListContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Subscript_ListContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_multi_Elem_Var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_Elem_Var" ):
                listener.enterMulti_Elem_Var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_Elem_Var" ):
                listener.exitMulti_Elem_Var(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_Elem_Var" ):
                return visitor.visitMulti_Elem_Var(self)
            else:
                return visitor.visitChildren(self)




    def multi_Elem_Var(self):

        localctx = StructuredTextParser.Multi_Elem_VarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_multi_Elem_Var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.var_Access()
            self.state = 783 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 782
                    self.subscript_List()

                else:
                    raise NoViableAltException(self)
                self.state = 785 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.COMMA)
            else:
                return self.getToken(StructuredTextParser.COMMA, i)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_subscript_List

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_List" ):
                listener.enterSubscript_List(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_List" ):
                listener.exitSubscript_List(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript_List" ):
                return visitor.visitSubscript_List(self)
            else:
                return visitor.visitChildren(self)




    def subscript_List(self):

        localctx = StructuredTextParser.Subscript_ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_subscript_List)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.match(StructuredTextParser.T__0)
            self.state = 788
            self.subscript()
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==127:
                self.state = 789
                self.match(StructuredTextParser.COMMA)
                self.state = 790
                self.subscript()
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 796
            self.match(StructuredTextParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(StructuredTextParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = StructuredTextParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_subscript)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_Var_NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructuredTextParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_global_Var_Name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_Var_Name" ):
                listener.enterGlobal_Var_Name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_Var_Name" ):
                listener.exitGlobal_Var_Name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_Var_Name" ):
                return visitor.visitGlobal_Var_Name(self)
            else:
                return visitor.visitChildren(self)




    def global_Var_Name(self):

        localctx = StructuredTextParser.Global_Var_NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_global_Var_Name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(StructuredTextParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_Var_DeclsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_GLOBAL(self):
            return self.getToken(StructuredTextParser.VAR_GLOBAL, 0)

        def END_VAR(self):
            return self.getToken(StructuredTextParser.END_VAR, 0)

        def global_Var_Decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Global_Var_DeclContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Global_Var_DeclContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.SEMICOLON)
            else:
                return self.getToken(StructuredTextParser.SEMICOLON, i)

        def CONSTANT(self):
            return self.getToken(StructuredTextParser.CONSTANT, 0)

        def RETAIN(self):
            return self.getToken(StructuredTextParser.RETAIN, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_global_Var_Decls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_Var_Decls" ):
                listener.enterGlobal_Var_Decls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_Var_Decls" ):
                listener.exitGlobal_Var_Decls(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_Var_Decls" ):
                return visitor.visitGlobal_Var_Decls(self)
            else:
                return visitor.visitChildren(self)




    def global_Var_Decls(self):

        localctx = StructuredTextParser.Global_Var_DeclsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_global_Var_Decls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(StructuredTextParser.VAR_GLOBAL)
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61 or _la==68:
                self.state = 803
                _la = self._input.LA(1)
                if not(_la==61 or _la==68):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 806
                self.global_Var_Decl()
                self.state = 807
                self.match(StructuredTextParser.SEMICOLON)
                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 814
            self.match(StructuredTextParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_Var_DeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_Var_Spec(self):
            return self.getTypedRuleContext(StructuredTextParser.Global_Var_SpecContext,0)


        def COLON(self):
            return self.getToken(StructuredTextParser.COLON, 0)

        def fb_Type_Access(self):
            return self.getTypedRuleContext(StructuredTextParser.Fb_Type_AccessContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_global_Var_Decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_Var_Decl" ):
                listener.enterGlobal_Var_Decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_Var_Decl" ):
                listener.exitGlobal_Var_Decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_Var_Decl" ):
                return visitor.visitGlobal_Var_Decl(self)
            else:
                return visitor.visitChildren(self)




    def global_Var_Decl(self):

        localctx = StructuredTextParser.Global_Var_DeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_global_Var_Decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.global_Var_Spec()
            self.state = 817
            self.match(StructuredTextParser.COLON)

            self.state = 818
            self.fb_Type_Access()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_Var_SpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_Var_Name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Global_Var_NameContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Global_Var_NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.COMMA)
            else:
                return self.getToken(StructuredTextParser.COMMA, i)

        def located_At(self):
            return self.getTypedRuleContext(StructuredTextParser.Located_AtContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_global_Var_Spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_Var_Spec" ):
                listener.enterGlobal_Var_Spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_Var_Spec" ):
                listener.exitGlobal_Var_Spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_Var_Spec" ):
                return visitor.visitGlobal_Var_Spec(self)
            else:
                return visitor.visitChildren(self)




    def global_Var_Spec(self):

        localctx = StructuredTextParser.Global_Var_SpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_global_Var_Spec)
        self._la = 0 # Token type
        try:
            self.state = 831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self.global_Var_Name()
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==127:
                    self.state = 821
                    self.match(StructuredTextParser.COMMA)
                    self.state = 822
                    self.global_Var_Name()
                    self.state = 827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 828
                self.global_Var_Name()
                self.state = 829
                self.located_At()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Located_AtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(StructuredTextParser.AT, 0)

        def direct_Variable(self):
            return self.getTypedRuleContext(StructuredTextParser.Direct_VariableContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_located_At

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocated_At" ):
                listener.enterLocated_At(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocated_At" ):
                listener.exitLocated_At(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocated_At" ):
                return visitor.visitLocated_At(self)
            else:
                return visitor.visitChildren(self)




    def located_At(self):

        localctx = StructuredTextParser.Located_AtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_located_At)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.match(StructuredTextParser.AT)
            self.state = 834
            self.direct_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Direct_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENT(self):
            return self.getToken(StructuredTextParser.PERCENT, 0)

        def row_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Row_numberContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Row_numberContext,i)


        def I(self):
            return self.getToken(StructuredTextParser.I, 0)

        def Q(self):
            return self.getToken(StructuredTextParser.Q, 0)

        def M(self):
            return self.getToken(StructuredTextParser.M, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.DOT)
            else:
                return self.getToken(StructuredTextParser.DOT, i)

        def X(self):
            return self.getToken(StructuredTextParser.X, 0)

        def B(self):
            return self.getToken(StructuredTextParser.B, 0)

        def W(self):
            return self.getToken(StructuredTextParser.W, 0)

        def D(self):
            return self.getToken(StructuredTextParser.D, 0)

        def L(self):
            return self.getToken(StructuredTextParser.L, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_direct_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirect_Variable" ):
                listener.enterDirect_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirect_Variable" ):
                listener.exitDirect_Variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirect_Variable" ):
                return visitor.visitDirect_Variable(self)
            else:
                return visitor.visitChildren(self)




    def direct_Variable(self):

        localctx = StructuredTextParser.Direct_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_direct_Variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(StructuredTextParser.PERCENT)
            self.state = 837
            _la = self._input.LA(1)
            if not((((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & 7) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 31) != 0:
                self.state = 838
                _la = self._input.LA(1)
                if not((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 31) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 841
            self.row_number()
            self.state = 846
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 842
                    self.match(StructuredTextParser.DOT)
                    self.state = 843
                    self.row_number() 
                self.state = 848
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(StructuredTextParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_constant_Expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_Expr" ):
                listener.enterConstant_Expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_Expr" ):
                listener.exitConstant_Expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_Expr" ):
                return visitor.visitConstant_Expr(self)
            else:
                return visitor.visitChildren(self)




    def constant_Expr(self):

        localctx = StructuredTextParser.Constant_ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_constant_Expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_AccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(StructuredTextParser.VariableContext,0)


        def multibit_Part_Access(self):
            return self.getTypedRuleContext(StructuredTextParser.Multibit_Part_AccessContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_variable_Access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_Access" ):
                listener.enterVariable_Access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_Access" ):
                listener.exitVariable_Access(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_Access" ):
                return visitor.visitVariable_Access(self)
            else:
                return visitor.visitChildren(self)




    def variable_Access(self):

        localctx = StructuredTextParser.Variable_AccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_variable_Access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.variable()
            self.state = 853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 852
                self.multibit_Part_Access()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_CallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_Access(self):
            return self.getTypedRuleContext(StructuredTextParser.Func_AccessContext,0)


        def L_PAREN(self):
            return self.getToken(StructuredTextParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(StructuredTextParser.R_PAREN, 0)

        def param_Assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Param_AssignContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Param_AssignContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.COMMA)
            else:
                return self.getToken(StructuredTextParser.COMMA, i)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_func_Call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_Call" ):
                listener.enterFunc_Call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_Call" ):
                listener.exitFunc_Call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_Call" ):
                return visitor.visitFunc_Call(self)
            else:
                return visitor.visitChildren(self)




    def func_Call(self):

        localctx = StructuredTextParser.Func_CallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_func_Call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.func_Access()
            self.state = 856
            self.match(StructuredTextParser.L_PAREN)
            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & -2216615441596415) != 0 or (((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 18929210399850495) != 0:
                self.state = 857
                self.param_Assign()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==127:
                    self.state = 858
                    self.match(StructuredTextParser.COMMA)
                    self.state = 859
                    self.param_Assign()
                    self.state = 864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 867
            self.match(StructuredTextParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stmt_ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.SEMICOLON)
            else:
                return self.getToken(StructuredTextParser.SEMICOLON, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.StmtContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.StmtContext,i)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_stmt_List

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt_List" ):
                listener.enterStmt_List(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt_List" ):
                listener.exitStmt_List(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt_List" ):
                return visitor.visitStmt_List(self)
            else:
                return visitor.visitChildren(self)




    def stmt_List(self):

        localctx = StructuredTextParser.Stmt_ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_stmt_List)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 870
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & 156813328) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 9007199254740995) != 0 or _la==145:
                        self.state = 869
                        self.stmt()


                    self.state = 872
                    self.match(StructuredTextParser.SEMICOLON) 
                self.state = 877
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assign_Stmt(self):
            return self.getTypedRuleContext(StructuredTextParser.Assign_StmtContext,0)


        def subprog_Ctrl_Stmt(self):
            return self.getTypedRuleContext(StructuredTextParser.Subprog_Ctrl_StmtContext,0)


        def selection_Stmt(self):
            return self.getTypedRuleContext(StructuredTextParser.Selection_StmtContext,0)


        def iteration_Stmt(self):
            return self.getTypedRuleContext(StructuredTextParser.Iteration_StmtContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = StructuredTextParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_stmt)
        try:
            self.state = 882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 878
                self.assign_Stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 879
                self.subprog_Ctrl_Stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 880
                self.selection_Stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 881
                self.iteration_Stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(StructuredTextParser.VariableContext,0)


        def ASSIGNE(self):
            return self.getToken(StructuredTextParser.ASSIGNE, 0)

        def expression(self):
            return self.getTypedRuleContext(StructuredTextParser.ExpressionContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_assign_Stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_Stmt" ):
                listener.enterAssign_Stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_Stmt" ):
                listener.exitAssign_Stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_Stmt" ):
                return visitor.visitAssign_Stmt(self)
            else:
                return visitor.visitChildren(self)




    def assign_Stmt(self):

        localctx = StructuredTextParser.Assign_StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assign_Stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.variable()
            self.state = 885
            self.match(StructuredTextParser.ASSIGNE)
            self.state = 886
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subprog_Ctrl_StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_Call(self):
            return self.getTypedRuleContext(StructuredTextParser.Func_CallContext,0)


        def SUPER(self):
            return self.getToken(StructuredTextParser.SUPER, 0)

        def L_PAREN(self):
            return self.getToken(StructuredTextParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(StructuredTextParser.R_PAREN, 0)

        def RETURN(self):
            return self.getToken(StructuredTextParser.RETURN, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_subprog_Ctrl_Stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubprog_Ctrl_Stmt" ):
                listener.enterSubprog_Ctrl_Stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubprog_Ctrl_Stmt" ):
                listener.exitSubprog_Ctrl_Stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubprog_Ctrl_Stmt" ):
                return visitor.visitSubprog_Ctrl_Stmt(self)
            else:
                return visitor.visitChildren(self)




    def subprog_Ctrl_Stmt(self):

        localctx = StructuredTextParser.Subprog_Ctrl_StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_subprog_Ctrl_Stmt)
        try:
            self.state = 893
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 888
                self.func_Call()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 889
                self.match(StructuredTextParser.SUPER)
                self.state = 890
                self.match(StructuredTextParser.L_PAREN)
                self.state = 891
                self.match(StructuredTextParser.R_PAREN)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 3)
                self.state = 892
                self.match(StructuredTextParser.RETURN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(StructuredTextParser.ExpressionContext,0)


        def variable_Name(self):
            return self.getTypedRuleContext(StructuredTextParser.Variable_NameContext,0)


        def ASSIGNE(self):
            return self.getToken(StructuredTextParser.ASSIGNE, 0)

        def OUTPUT_ARROW(self):
            return self.getToken(StructuredTextParser.OUTPUT_ARROW, 0)

        def variable(self):
            return self.getTypedRuleContext(StructuredTextParser.VariableContext,0)


        def NOT(self):
            return self.getToken(StructuredTextParser.NOT, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_param_Assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_Assign" ):
                listener.enterParam_Assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_Assign" ):
                listener.exitParam_Assign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_Assign" ):
                return visitor.visitParam_Assign(self)
            else:
                return visitor.visitChildren(self)




    def param_Assign(self):

        localctx = StructuredTextParser.Param_AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_param_Assign)
        self._la = 0 # Token type
        try:
            self.state = 908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 898
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 895
                    self.variable_Name()
                    self.state = 896
                    self.match(StructuredTextParser.ASSIGNE)


                self.state = 900
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==113:
                    self.state = 901
                    self.match(StructuredTextParser.NOT)


                self.state = 904
                self.variable_Name()
                self.state = 905
                self.match(StructuredTextParser.OUTPUT_ARROW)
                self.state = 906
                self.variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_Stmt(self):
            return self.getTypedRuleContext(StructuredTextParser.If_StmtContext,0)


        def case_Stmt(self):
            return self.getTypedRuleContext(StructuredTextParser.Case_StmtContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_selection_Stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_Stmt" ):
                listener.enterSelection_Stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_Stmt" ):
                listener.exitSelection_Stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelection_Stmt" ):
                return visitor.visitSelection_Stmt(self)
            else:
                return visitor.visitChildren(self)




    def selection_Stmt(self):

        localctx = StructuredTextParser.Selection_StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_selection_Stmt)
        try:
            self.state = 912
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 910
                self.if_Stmt()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 911
                self.case_Stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(StructuredTextParser.IF, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.ExpressionContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.THEN)
            else:
                return self.getToken(StructuredTextParser.THEN, i)

        def stmt_List(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Stmt_ListContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Stmt_ListContext,i)


        def END_IF(self):
            return self.getToken(StructuredTextParser.END_IF, 0)

        def ELSIF(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.ELSIF)
            else:
                return self.getToken(StructuredTextParser.ELSIF, i)

        def ELSE(self):
            return self.getToken(StructuredTextParser.ELSE, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_if_Stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_Stmt" ):
                listener.enterIf_Stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_Stmt" ):
                listener.exitIf_Stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_Stmt" ):
                return visitor.visitIf_Stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_Stmt(self):

        localctx = StructuredTextParser.If_StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_if_Stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.match(StructuredTextParser.IF)
            self.state = 915
            self.expression(0)
            self.state = 916
            self.match(StructuredTextParser.THEN)
            self.state = 917
            self.stmt_List()
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 918
                self.match(StructuredTextParser.ELSIF)
                self.state = 919
                self.expression(0)
                self.state = 920
                self.match(StructuredTextParser.THEN)
                self.state = 921
                self.stmt_List()
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 928
                self.match(StructuredTextParser.ELSE)
                self.state = 929
                self.stmt_List()


            self.state = 932
            self.match(StructuredTextParser.END_IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(StructuredTextParser.CASE, 0)

        def expression(self):
            return self.getTypedRuleContext(StructuredTextParser.ExpressionContext,0)


        def OF(self):
            return self.getToken(StructuredTextParser.OF, 0)

        def END_CASE(self):
            return self.getToken(StructuredTextParser.END_CASE, 0)

        def case_Selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Case_SelectionContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Case_SelectionContext,i)


        def ELSE(self):
            return self.getToken(StructuredTextParser.ELSE, 0)

        def stmt_List(self):
            return self.getTypedRuleContext(StructuredTextParser.Stmt_ListContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_case_Stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_Stmt" ):
                listener.enterCase_Stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_Stmt" ):
                listener.exitCase_Stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_Stmt" ):
                return visitor.visitCase_Stmt(self)
            else:
                return visitor.visitChildren(self)




    def case_Stmt(self):

        localctx = StructuredTextParser.Case_StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_case_Stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(StructuredTextParser.CASE)
            self.state = 935
            self.expression(0)
            self.state = 936
            self.match(StructuredTextParser.OF)
            self.state = 938 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 937
                self.case_Selection()
                self.state = 940 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & -2216615441596415) != 0 or (((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 18929210399850495) != 0):
                    break

            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 942
                self.match(StructuredTextParser.ELSE)
                self.state = 943
                self.stmt_List()


            self.state = 946
            self.match(StructuredTextParser.END_CASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def case_List(self):
            return self.getTypedRuleContext(StructuredTextParser.Case_ListContext,0)


        def COLON(self):
            return self.getToken(StructuredTextParser.COLON, 0)

        def stmt_List(self):
            return self.getTypedRuleContext(StructuredTextParser.Stmt_ListContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_case_Selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_Selection" ):
                listener.enterCase_Selection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_Selection" ):
                listener.exitCase_Selection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_Selection" ):
                return visitor.visitCase_Selection(self)
            else:
                return visitor.visitChildren(self)




    def case_Selection(self):

        localctx = StructuredTextParser.Case_SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_case_Selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.case_List()
            self.state = 949
            self.match(StructuredTextParser.COLON)
            self.state = 950
            self.stmt_List()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def case_List_Elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.Case_List_ElemContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.Case_List_ElemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StructuredTextParser.COMMA)
            else:
                return self.getToken(StructuredTextParser.COMMA, i)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_case_List

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_List" ):
                listener.enterCase_List(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_List" ):
                listener.exitCase_List(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_List" ):
                return visitor.visitCase_List(self)
            else:
                return visitor.visitChildren(self)




    def case_List(self):

        localctx = StructuredTextParser.Case_ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_case_List)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.case_List_Elem()
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==127:
                self.state = 953
                self.match(StructuredTextParser.COMMA)
                self.state = 954
                self.case_List_Elem()
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_List_ElemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_Expr(self):
            return self.getTypedRuleContext(StructuredTextParser.Constant_ExprContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_case_List_Elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_List_Elem" ):
                listener.enterCase_List_Elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_List_Elem" ):
                listener.exitCase_List_Elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_List_Elem" ):
                return visitor.visitCase_List_Elem(self)
            else:
                return visitor.visitChildren(self)




    def case_List_Elem(self):

        localctx = StructuredTextParser.Case_List_ElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_case_List_Elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.constant_Expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Iteration_StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_Stmt(self):
            return self.getTypedRuleContext(StructuredTextParser.For_StmtContext,0)


        def while_Stmt(self):
            return self.getTypedRuleContext(StructuredTextParser.While_StmtContext,0)


        def repeat_Stmt(self):
            return self.getTypedRuleContext(StructuredTextParser.Repeat_StmtContext,0)


        def EXIT(self):
            return self.getToken(StructuredTextParser.EXIT, 0)

        def CONTINUE(self):
            return self.getToken(StructuredTextParser.CONTINUE, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_iteration_Stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteration_Stmt" ):
                listener.enterIteration_Stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteration_Stmt" ):
                listener.exitIteration_Stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIteration_Stmt" ):
                return visitor.visitIteration_Stmt(self)
            else:
                return visitor.visitChildren(self)




    def iteration_Stmt(self):

        localctx = StructuredTextParser.Iteration_StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_iteration_Stmt)
        try:
            self.state = 967
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 962
                self.for_Stmt()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self.while_Stmt()
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 3)
                self.state = 964
                self.repeat_Stmt()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 4)
                self.state = 965
                self.match(StructuredTextParser.EXIT)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 5)
                self.state = 966
                self.match(StructuredTextParser.CONTINUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(StructuredTextParser.FOR, 0)

        def control_Variable(self):
            return self.getTypedRuleContext(StructuredTextParser.Control_VariableContext,0)


        def ASSIGNE(self):
            return self.getToken(StructuredTextParser.ASSIGNE, 0)

        def for_List(self):
            return self.getTypedRuleContext(StructuredTextParser.For_ListContext,0)


        def DO(self):
            return self.getToken(StructuredTextParser.DO, 0)

        def stmt_List(self):
            return self.getTypedRuleContext(StructuredTextParser.Stmt_ListContext,0)


        def END_FOR(self):
            return self.getToken(StructuredTextParser.END_FOR, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_for_Stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_Stmt" ):
                listener.enterFor_Stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_Stmt" ):
                listener.exitFor_Stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_Stmt" ):
                return visitor.visitFor_Stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_Stmt(self):

        localctx = StructuredTextParser.For_StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_for_Stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(StructuredTextParser.FOR)
            self.state = 970
            self.control_Variable()
            self.state = 971
            self.match(StructuredTextParser.ASSIGNE)
            self.state = 972
            self.for_List()
            self.state = 973
            self.match(StructuredTextParser.DO)
            self.state = 974
            self.stmt_List()
            self.state = 975
            self.match(StructuredTextParser.END_FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Control_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructuredTextParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_control_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControl_Variable" ):
                listener.enterControl_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControl_Variable" ):
                listener.exitControl_Variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControl_Variable" ):
                return visitor.visitControl_Variable(self)
            else:
                return visitor.visitChildren(self)




    def control_Variable(self):

        localctx = StructuredTextParser.Control_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_control_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(StructuredTextParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructuredTextParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(StructuredTextParser.ExpressionContext,i)


        def TO(self):
            return self.getToken(StructuredTextParser.TO, 0)

        def BY(self):
            return self.getToken(StructuredTextParser.BY, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_for_List

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_List" ):
                listener.enterFor_List(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_List" ):
                listener.exitFor_List(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_List" ):
                return visitor.visitFor_List(self)
            else:
                return visitor.visitChildren(self)




    def for_List(self):

        localctx = StructuredTextParser.For_ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_for_List)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.expression(0)
            self.state = 980
            self.match(StructuredTextParser.TO)
            self.state = 981
            self.expression(0)
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 982
                self.match(StructuredTextParser.BY)
                self.state = 983
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(StructuredTextParser.WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(StructuredTextParser.ExpressionContext,0)


        def DO(self):
            return self.getToken(StructuredTextParser.DO, 0)

        def stmt_List(self):
            return self.getTypedRuleContext(StructuredTextParser.Stmt_ListContext,0)


        def END_WHILE(self):
            return self.getToken(StructuredTextParser.END_WHILE, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_while_Stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_Stmt" ):
                listener.enterWhile_Stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_Stmt" ):
                listener.exitWhile_Stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_Stmt" ):
                return visitor.visitWhile_Stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_Stmt(self):

        localctx = StructuredTextParser.While_StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_while_Stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.match(StructuredTextParser.WHILE)
            self.state = 987
            self.expression(0)
            self.state = 988
            self.match(StructuredTextParser.DO)
            self.state = 989
            self.stmt_List()
            self.state = 990
            self.match(StructuredTextParser.END_WHILE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repeat_StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self):
            return self.getToken(StructuredTextParser.REPEAT, 0)

        def stmt_List(self):
            return self.getTypedRuleContext(StructuredTextParser.Stmt_ListContext,0)


        def UNTIL(self):
            return self.getToken(StructuredTextParser.UNTIL, 0)

        def expression(self):
            return self.getTypedRuleContext(StructuredTextParser.ExpressionContext,0)


        def END_REPEAT(self):
            return self.getToken(StructuredTextParser.END_REPEAT, 0)

        def getRuleIndex(self):
            return StructuredTextParser.RULE_repeat_Stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeat_Stmt" ):
                listener.enterRepeat_Stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeat_Stmt" ):
                listener.exitRepeat_Stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeat_Stmt" ):
                return visitor.visitRepeat_Stmt(self)
            else:
                return visitor.visitChildren(self)




    def repeat_Stmt(self):

        localctx = StructuredTextParser.Repeat_StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_repeat_Stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.match(StructuredTextParser.REPEAT)
            self.state = 993
            self.stmt_List()
            self.state = 994
            self.match(StructuredTextParser.UNTIL)
            self.state = 995
            self.expression(0)
            self.state = 996
            self.match(StructuredTextParser.END_REPEAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt_List(self):
            return self.getTypedRuleContext(StructuredTextParser.Stmt_ListContext,0)


        def getRuleIndex(self):
            return StructuredTextParser.RULE_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_body" ):
                listener.enterFunction_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_body" ):
                listener.exitFunction_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_body" ):
                return visitor.visitFunction_body(self)
            else:
                return visitor.visitChildren(self)




    def function_body(self):

        localctx = StructuredTextParser.Function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_function_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.stmt_List()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[50] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         




